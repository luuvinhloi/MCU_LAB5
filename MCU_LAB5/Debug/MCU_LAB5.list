
MCU_LAB5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034a8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080035b4  080035b4  000135b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800361c  0800361c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800361c  0800361c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800361c  0800361c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800361c  0800361c  0001361c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003620  08003620  00013620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003624  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  20000074  08003698  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  08003698  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f715  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002657  00000000  00000000  0002f7b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  00031e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c70  00000000  00000000  00032b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019268  00000000  00000000  00033800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f54d  00000000  00000000  0004ca68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d6f1  00000000  00000000  0005bfb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e96a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a9c  00000000  00000000  000e96fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	0800359c 	.word	0x0800359c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	0800359c 	.word	0x0800359c

0800014c <command_parser_fsm>:
uint8_t OK = 0;
char *str;
uint8_t buffer[BUFFER_SIZE];
uint8_t buffer_idx = 0;

void command_parser_fsm(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch(parser){
 8000150:	4b30      	ldr	r3, [pc, #192]	; (8000214 <command_parser_fsm+0xc8>)
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	2b0e      	cmp	r3, #14
 8000156:	d022      	beq.n	800019e <command_parser_fsm+0x52>
 8000158:	2b0e      	cmp	r3, #14
 800015a:	dc58      	bgt.n	800020e <command_parser_fsm+0xc2>
 800015c:	2b0b      	cmp	r3, #11
 800015e:	d002      	beq.n	8000166 <command_parser_fsm+0x1a>
 8000160:	2b0d      	cmp	r3, #13
 8000162:	d011      	beq.n	8000188 <command_parser_fsm+0x3c>
			break;
		}
		setTimer1(PARSER_WAIT);
		break;
	}
}
 8000164:	e053      	b.n	800020e <command_parser_fsm+0xc2>
		if(RST == 1){
 8000166:	4b2c      	ldr	r3, [pc, #176]	; (8000218 <command_parser_fsm+0xcc>)
 8000168:	781b      	ldrb	r3, [r3, #0]
 800016a:	2b01      	cmp	r3, #1
 800016c:	d14e      	bne.n	800020c <command_parser_fsm+0xc0>
			setTimer1(0);
 800016e:	2000      	movs	r0, #0
 8000170:	f000 fa44 	bl	80005fc <setTimer1>
			RST = 0;
 8000174:	4b28      	ldr	r3, [pc, #160]	; (8000218 <command_parser_fsm+0xcc>)
 8000176:	2200      	movs	r2, #0
 8000178:	701a      	strb	r2, [r3, #0]
			print = 1;
 800017a:	4b28      	ldr	r3, [pc, #160]	; (800021c <command_parser_fsm+0xd0>)
 800017c:	2201      	movs	r2, #1
 800017e:	701a      	strb	r2, [r3, #0]
			parser = PRINT_MODE;
 8000180:	4b24      	ldr	r3, [pc, #144]	; (8000214 <command_parser_fsm+0xc8>)
 8000182:	220d      	movs	r2, #13
 8000184:	701a      	strb	r2, [r3, #0]
		break;
 8000186:	e041      	b.n	800020c <command_parser_fsm+0xc0>
		setTimer1(PARSER_WAIT);
 8000188:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800018c:	f000 fa36 	bl	80005fc <setTimer1>
		print = 0;
 8000190:	4b22      	ldr	r3, [pc, #136]	; (800021c <command_parser_fsm+0xd0>)
 8000192:	2200      	movs	r2, #0
 8000194:	701a      	strb	r2, [r3, #0]
		parser = WAIT_MODE;
 8000196:	4b1f      	ldr	r3, [pc, #124]	; (8000214 <command_parser_fsm+0xc8>)
 8000198:	220e      	movs	r2, #14
 800019a:	701a      	strb	r2, [r3, #0]
		break;
 800019c:	e037      	b.n	800020e <command_parser_fsm+0xc2>
		if(RST == 1) {
 800019e:	4b1e      	ldr	r3, [pc, #120]	; (8000218 <command_parser_fsm+0xcc>)
 80001a0:	781b      	ldrb	r3, [r3, #0]
 80001a2:	2b01      	cmp	r3, #1
 80001a4:	d10c      	bne.n	80001c0 <command_parser_fsm+0x74>
			setTimer1(0);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f000 fa28 	bl	80005fc <setTimer1>
			RST = 0;
 80001ac:	4b1a      	ldr	r3, [pc, #104]	; (8000218 <command_parser_fsm+0xcc>)
 80001ae:	2200      	movs	r2, #0
 80001b0:	701a      	strb	r2, [r3, #0]
			print = 1;
 80001b2:	4b1a      	ldr	r3, [pc, #104]	; (800021c <command_parser_fsm+0xd0>)
 80001b4:	2201      	movs	r2, #1
 80001b6:	701a      	strb	r2, [r3, #0]
			parser = PRINT_MODE;
 80001b8:	4b16      	ldr	r3, [pc, #88]	; (8000214 <command_parser_fsm+0xc8>)
 80001ba:	220d      	movs	r2, #13
 80001bc:	701a      	strb	r2, [r3, #0]
			break;
 80001be:	e026      	b.n	800020e <command_parser_fsm+0xc2>
		if(OK == 1) {
 80001c0:	4b17      	ldr	r3, [pc, #92]	; (8000220 <command_parser_fsm+0xd4>)
 80001c2:	781b      	ldrb	r3, [r3, #0]
 80001c4:	2b01      	cmp	r3, #1
 80001c6:	d10c      	bne.n	80001e2 <command_parser_fsm+0x96>
			setTimer1(0);
 80001c8:	2000      	movs	r0, #0
 80001ca:	f000 fa17 	bl	80005fc <setTimer1>
			OK = 0;
 80001ce:	4b14      	ldr	r3, [pc, #80]	; (8000220 <command_parser_fsm+0xd4>)
 80001d0:	2200      	movs	r2, #0
 80001d2:	701a      	strb	r2, [r3, #0]
			print = 0;
 80001d4:	4b11      	ldr	r3, [pc, #68]	; (800021c <command_parser_fsm+0xd0>)
 80001d6:	2200      	movs	r2, #0
 80001d8:	701a      	strb	r2, [r3, #0]
			parser = INIT_MODE;
 80001da:	4b0e      	ldr	r3, [pc, #56]	; (8000214 <command_parser_fsm+0xc8>)
 80001dc:	220b      	movs	r2, #11
 80001de:	701a      	strb	r2, [r3, #0]
			break;
 80001e0:	e015      	b.n	800020e <command_parser_fsm+0xc2>
		if(timer1_flag == 1) {
 80001e2:	4b10      	ldr	r3, [pc, #64]	; (8000224 <command_parser_fsm+0xd8>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	2b01      	cmp	r3, #1
 80001e8:	d10b      	bne.n	8000202 <command_parser_fsm+0xb6>
			setTimer1(0);
 80001ea:	2000      	movs	r0, #0
 80001ec:	f000 fa06 	bl	80005fc <setTimer1>
			clear();
 80001f0:	f000 f81a 	bl	8000228 <clear>
			print = 1;
 80001f4:	4b09      	ldr	r3, [pc, #36]	; (800021c <command_parser_fsm+0xd0>)
 80001f6:	2201      	movs	r2, #1
 80001f8:	701a      	strb	r2, [r3, #0]
			parser = PRINT_MODE;
 80001fa:	4b06      	ldr	r3, [pc, #24]	; (8000214 <command_parser_fsm+0xc8>)
 80001fc:	220d      	movs	r2, #13
 80001fe:	701a      	strb	r2, [r3, #0]
			break;
 8000200:	e005      	b.n	800020e <command_parser_fsm+0xc2>
		setTimer1(PARSER_WAIT);
 8000202:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000206:	f000 f9f9 	bl	80005fc <setTimer1>
		break;
 800020a:	e000      	b.n	800020e <command_parser_fsm+0xc2>
		break;
 800020c:	bf00      	nop
}
 800020e:	bf00      	nop
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	20000000 	.word	0x20000000
 8000218:	20000090 	.word	0x20000090
 800021c:	20000099 	.word	0x20000099
 8000220:	20000091 	.word	0x20000091
 8000224:	2000009c 	.word	0x2000009c

08000228 <clear>:
void clear(void){
 8000228:	b480      	push	{r7}
 800022a:	b083      	sub	sp, #12
 800022c:	af00      	add	r7, sp, #0
	for (int i = 0; i<BUFFER_SIZE; i++) {
 800022e:	2300      	movs	r3, #0
 8000230:	607b      	str	r3, [r7, #4]
 8000232:	e007      	b.n	8000244 <clear+0x1c>
		buffer[i] = 0;
 8000234:	4a09      	ldr	r2, [pc, #36]	; (800025c <clear+0x34>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	4413      	add	r3, r2
 800023a:	2200      	movs	r2, #0
 800023c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<BUFFER_SIZE; i++) {
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	3301      	adds	r3, #1
 8000242:	607b      	str	r3, [r7, #4]
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	2b1d      	cmp	r3, #29
 8000248:	ddf4      	ble.n	8000234 <clear+0xc>
	}
	buffer_idx = 0;
 800024a:	4b05      	ldr	r3, [pc, #20]	; (8000260 <clear+0x38>)
 800024c:	2200      	movs	r2, #0
 800024e:	701a      	strb	r2, [r3, #0]
}
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	bc80      	pop	{r7}
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	200000c0 	.word	0x200000c0
 8000260:	20000092 	.word	0x20000092

08000264 <ledBlinky>:
 *      Author: LUUVINHLOI
 */

#include "ledBlinky.h"

void ledBlinky(void) {
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	switch(led) {
 8000268:	4b0e      	ldr	r3, [pc, #56]	; (80002a4 <ledBlinky+0x40>)
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	2b15      	cmp	r3, #21
 800026e:	d002      	beq.n	8000276 <ledBlinky+0x12>
 8000270:	2b16      	cmp	r3, #22
 8000272:	d007      	beq.n	8000284 <ledBlinky+0x20>
				setTimer3(LED_PERIOD);
				HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
			}
		break;
	}
}
 8000274:	e013      	b.n	800029e <ledBlinky+0x3a>
			setTimer3(TICK);
 8000276:	200a      	movs	r0, #10
 8000278:	f000 f9f8 	bl	800066c <setTimer3>
			led = LED_BLINKY;
 800027c:	4b09      	ldr	r3, [pc, #36]	; (80002a4 <ledBlinky+0x40>)
 800027e:	2216      	movs	r2, #22
 8000280:	701a      	strb	r2, [r3, #0]
			break;
 8000282:	e00c      	b.n	800029e <ledBlinky+0x3a>
			if(timer3_flag == 1) {
 8000284:	4b08      	ldr	r3, [pc, #32]	; (80002a8 <ledBlinky+0x44>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	2b01      	cmp	r3, #1
 800028a:	d107      	bne.n	800029c <ledBlinky+0x38>
				setTimer3(LED_PERIOD);
 800028c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000290:	f000 f9ec 	bl	800066c <setTimer3>
				HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000294:	2120      	movs	r1, #32
 8000296:	4805      	ldr	r0, [pc, #20]	; (80002ac <ledBlinky+0x48>)
 8000298:	f001 fa26 	bl	80016e8 <HAL_GPIO_TogglePin>
		break;
 800029c:	bf00      	nop
}
 800029e:	bf00      	nop
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	20000001 	.word	0x20000001
 80002a8:	200000a4 	.word	0x200000a4
 80002ac:	40010800 	.word	0x40010800

080002b0 <HAL_TIM_PeriodElapsedCallback>:
/**
  * @brief  The application entry point.
  * @retval int
  */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
    timerRun();
 80002b8:	f000 f9f4 	bl	80006a4 <timerRun>
}
 80002bc:	bf00      	nop
 80002be:	3708      	adds	r7, #8
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}

080002c4 <readSensor>:
		HAL_UART_Transmit(&huart2, &temp, 1, 50);
		HAL_UART_Receive_IT(&huart2, &temp, 1);

	}
}
void readSensor(void) {
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b08e      	sub	sp, #56	; 0x38
 80002c8:	af00      	add	r7, sp, #0
	char str[50];
	ADC_value = HAL_ADC_GetValue(&hadc1);
 80002ca:	480c      	ldr	r0, [pc, #48]	; (80002fc <readSensor+0x38>)
 80002cc:	f000 fdcc 	bl	8000e68 <HAL_ADC_GetValue>
 80002d0:	4603      	mov	r3, r0
 80002d2:	4a0b      	ldr	r2, [pc, #44]	; (8000300 <readSensor+0x3c>)
 80002d4:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!ADC=%ld#", ADC_value), 1000);
 80002d6:	4b0a      	ldr	r3, [pc, #40]	; (8000300 <readSensor+0x3c>)
 80002d8:	681a      	ldr	r2, [r3, #0]
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	4909      	ldr	r1, [pc, #36]	; (8000304 <readSensor+0x40>)
 80002de:	4618      	mov	r0, r3
 80002e0:	f002 fd22 	bl	8002d28 <siprintf>
 80002e4:	4603      	mov	r3, r0
 80002e6:	b29a      	uxth	r2, r3
 80002e8:	1d39      	adds	r1, r7, #4
 80002ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002ee:	4806      	ldr	r0, [pc, #24]	; (8000308 <readSensor+0x44>)
 80002f0:	f002 fb15 	bl	800291e <HAL_UART_Transmit>
}
 80002f4:	bf00      	nop
 80002f6:	3738      	adds	r7, #56	; 0x38
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	200000e4 	.word	0x200000e4
 8000300:	20000094 	.word	0x20000094
 8000304:	080035b4 	.word	0x080035b4
 8000308:	2000015c 	.word	0x2000015c

0800030c <main>:
int main(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000310:	f000 fbc2 	bl	8000a98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000314:	f000 f836 	bl	8000384 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000318:	f000 f938 	bl	800058c <MX_GPIO_Init>
  MX_ADC1_Init();
 800031c:	f000 f882 	bl	8000424 <MX_ADC1_Init>

  MX_TIM2_Init();
 8000320:	f000 f8be 	bl	80004a0 <MX_TIM2_Init>
  HAL_ADC_Start(&hadc1);
 8000324:	4811      	ldr	r0, [pc, #68]	; (800036c <main+0x60>)
 8000326:	f000 fcf1 	bl	8000d0c <HAL_ADC_Start>
  MX_USART2_UART_Init();
 800032a:	f000 f905 	bl	8000538 <MX_USART2_UART_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 800032e:	4810      	ldr	r0, [pc, #64]	; (8000370 <main+0x64>)
 8000330:	f001 ff14 	bl	800215c <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, &temp, 1);
 8000334:	2201      	movs	r2, #1
 8000336:	490f      	ldr	r1, [pc, #60]	; (8000374 <main+0x68>)
 8000338:	480f      	ldr	r0, [pc, #60]	; (8000378 <main+0x6c>)
 800033a:	f002 fb82 	bl	8002a42 <HAL_UART_Receive_IT>
  //uint8_t tmp;

  while (1)
  {
    /* USER CODE END WHILE */
	  ledBlinky();
 800033e:	f7ff ff91 	bl	8000264 <ledBlinky>
	  if(buffer_flag == 1 || timer1_flag == 1) {
 8000342:	4b0e      	ldr	r3, [pc, #56]	; (800037c <main+0x70>)
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	2b01      	cmp	r3, #1
 8000348:	d003      	beq.n	8000352 <main+0x46>
 800034a:	4b0d      	ldr	r3, [pc, #52]	; (8000380 <main+0x74>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	2b01      	cmp	r3, #1
 8000350:	d108      	bne.n	8000364 <main+0x58>
		 if(buffer_flag == 1){
 8000352:	4b0a      	ldr	r3, [pc, #40]	; (800037c <main+0x70>)
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	2b01      	cmp	r3, #1
 8000358:	d102      	bne.n	8000360 <main+0x54>

			 buffer_flag = 0;
 800035a:	4b08      	ldr	r3, [pc, #32]	; (800037c <main+0x70>)
 800035c:	2200      	movs	r2, #0
 800035e:	701a      	strb	r2, [r3, #0]
		 }
		 command_parser_fsm();
 8000360:	f7ff fef4 	bl	800014c <command_parser_fsm>
	  }
	  uart_communiation_fsm();
 8000364:	f000 fb2a 	bl	80009bc <uart_communiation_fsm>
	  ledBlinky();
 8000368:	e7e9      	b.n	800033e <main+0x32>
 800036a:	bf00      	nop
 800036c:	200000e4 	.word	0x200000e4
 8000370:	20000114 	.word	0x20000114
 8000374:	20000093 	.word	0x20000093
 8000378:	2000015c 	.word	0x2000015c
 800037c:	20000098 	.word	0x20000098
 8000380:	2000009c 	.word	0x2000009c

08000384 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b094      	sub	sp, #80	; 0x50
 8000388:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800038a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800038e:	2228      	movs	r2, #40	; 0x28
 8000390:	2100      	movs	r1, #0
 8000392:	4618      	mov	r0, r3
 8000394:	f002 fcc0 	bl	8002d18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000398:	f107 0314 	add.w	r3, r7, #20
 800039c:	2200      	movs	r2, #0
 800039e:	601a      	str	r2, [r3, #0]
 80003a0:	605a      	str	r2, [r3, #4]
 80003a2:	609a      	str	r2, [r3, #8]
 80003a4:	60da      	str	r2, [r3, #12]
 80003a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003a8:	1d3b      	adds	r3, r7, #4
 80003aa:	2200      	movs	r2, #0
 80003ac:	601a      	str	r2, [r3, #0]
 80003ae:	605a      	str	r2, [r3, #4]
 80003b0:	609a      	str	r2, [r3, #8]
 80003b2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003b4:	2302      	movs	r3, #2
 80003b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003b8:	2301      	movs	r3, #1
 80003ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003bc:	2310      	movs	r3, #16
 80003be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003c0:	2300      	movs	r3, #0
 80003c2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003c8:	4618      	mov	r0, r3
 80003ca:	f001 f9a7 	bl	800171c <HAL_RCC_OscConfig>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80003d4:	f000 f90c 	bl	80005f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003d8:	230f      	movs	r3, #15
 80003da:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003dc:	2300      	movs	r3, #0
 80003de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003e0:	2300      	movs	r3, #0
 80003e2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003e4:	2300      	movs	r3, #0
 80003e6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003e8:	2300      	movs	r3, #0
 80003ea:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003ec:	f107 0314 	add.w	r3, r7, #20
 80003f0:	2100      	movs	r1, #0
 80003f2:	4618      	mov	r0, r3
 80003f4:	f001 fc12 	bl	8001c1c <HAL_RCC_ClockConfig>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80003fe:	f000 f8f7 	bl	80005f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000402:	2302      	movs	r3, #2
 8000404:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000406:	2300      	movs	r3, #0
 8000408:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800040a:	1d3b      	adds	r3, r7, #4
 800040c:	4618      	mov	r0, r3
 800040e:	f001 fd9f 	bl	8001f50 <HAL_RCCEx_PeriphCLKConfig>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d001      	beq.n	800041c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000418:	f000 f8ea 	bl	80005f0 <Error_Handler>
  }
}
 800041c:	bf00      	nop
 800041e:	3750      	adds	r7, #80	; 0x50
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}

08000424 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b084      	sub	sp, #16
 8000428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800042a:	1d3b      	adds	r3, r7, #4
 800042c:	2200      	movs	r2, #0
 800042e:	601a      	str	r2, [r3, #0]
 8000430:	605a      	str	r2, [r3, #4]
 8000432:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000434:	4b18      	ldr	r3, [pc, #96]	; (8000498 <MX_ADC1_Init+0x74>)
 8000436:	4a19      	ldr	r2, [pc, #100]	; (800049c <MX_ADC1_Init+0x78>)
 8000438:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800043a:	4b17      	ldr	r3, [pc, #92]	; (8000498 <MX_ADC1_Init+0x74>)
 800043c:	2200      	movs	r2, #0
 800043e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000440:	4b15      	ldr	r3, [pc, #84]	; (8000498 <MX_ADC1_Init+0x74>)
 8000442:	2201      	movs	r2, #1
 8000444:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000446:	4b14      	ldr	r3, [pc, #80]	; (8000498 <MX_ADC1_Init+0x74>)
 8000448:	2200      	movs	r2, #0
 800044a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800044c:	4b12      	ldr	r3, [pc, #72]	; (8000498 <MX_ADC1_Init+0x74>)
 800044e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000452:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000454:	4b10      	ldr	r3, [pc, #64]	; (8000498 <MX_ADC1_Init+0x74>)
 8000456:	2200      	movs	r2, #0
 8000458:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800045a:	4b0f      	ldr	r3, [pc, #60]	; (8000498 <MX_ADC1_Init+0x74>)
 800045c:	2201      	movs	r2, #1
 800045e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000460:	480d      	ldr	r0, [pc, #52]	; (8000498 <MX_ADC1_Init+0x74>)
 8000462:	f000 fb7b 	bl	8000b5c <HAL_ADC_Init>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800046c:	f000 f8c0 	bl	80005f0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000470:	2300      	movs	r3, #0
 8000472:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000474:	2301      	movs	r3, #1
 8000476:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000478:	2300      	movs	r3, #0
 800047a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800047c:	1d3b      	adds	r3, r7, #4
 800047e:	4619      	mov	r1, r3
 8000480:	4805      	ldr	r0, [pc, #20]	; (8000498 <MX_ADC1_Init+0x74>)
 8000482:	f000 fcfd 	bl	8000e80 <HAL_ADC_ConfigChannel>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800048c:	f000 f8b0 	bl	80005f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000490:	bf00      	nop
 8000492:	3710      	adds	r7, #16
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	200000e4 	.word	0x200000e4
 800049c:	40012400 	.word	0x40012400

080004a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b086      	sub	sp, #24
 80004a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004a6:	f107 0308 	add.w	r3, r7, #8
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
 80004ae:	605a      	str	r2, [r3, #4]
 80004b0:	609a      	str	r2, [r3, #8]
 80004b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004b4:	463b      	mov	r3, r7
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
 80004ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004bc:	4b1d      	ldr	r3, [pc, #116]	; (8000534 <MX_TIM2_Init+0x94>)
 80004be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80004c4:	4b1b      	ldr	r3, [pc, #108]	; (8000534 <MX_TIM2_Init+0x94>)
 80004c6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80004ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004cc:	4b19      	ldr	r3, [pc, #100]	; (8000534 <MX_TIM2_Init+0x94>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80004d2:	4b18      	ldr	r3, [pc, #96]	; (8000534 <MX_TIM2_Init+0x94>)
 80004d4:	2209      	movs	r2, #9
 80004d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004d8:	4b16      	ldr	r3, [pc, #88]	; (8000534 <MX_TIM2_Init+0x94>)
 80004da:	2200      	movs	r2, #0
 80004dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004de:	4b15      	ldr	r3, [pc, #84]	; (8000534 <MX_TIM2_Init+0x94>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004e4:	4813      	ldr	r0, [pc, #76]	; (8000534 <MX_TIM2_Init+0x94>)
 80004e6:	f001 fde9 	bl	80020bc <HAL_TIM_Base_Init>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d001      	beq.n	80004f4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80004f0:	f000 f87e 	bl	80005f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004fa:	f107 0308 	add.w	r3, r7, #8
 80004fe:	4619      	mov	r1, r3
 8000500:	480c      	ldr	r0, [pc, #48]	; (8000534 <MX_TIM2_Init+0x94>)
 8000502:	f001 ff7f 	bl	8002404 <HAL_TIM_ConfigClockSource>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d001      	beq.n	8000510 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800050c:	f000 f870 	bl	80005f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000510:	2300      	movs	r3, #0
 8000512:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000514:	2300      	movs	r3, #0
 8000516:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000518:	463b      	mov	r3, r7
 800051a:	4619      	mov	r1, r3
 800051c:	4805      	ldr	r0, [pc, #20]	; (8000534 <MX_TIM2_Init+0x94>)
 800051e:	f002 f947 	bl	80027b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000528:	f000 f862 	bl	80005f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800052c:	bf00      	nop
 800052e:	3718      	adds	r7, #24
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	20000114 	.word	0x20000114

08000538 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800053c:	4b11      	ldr	r3, [pc, #68]	; (8000584 <MX_USART2_UART_Init+0x4c>)
 800053e:	4a12      	ldr	r2, [pc, #72]	; (8000588 <MX_USART2_UART_Init+0x50>)
 8000540:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000542:	4b10      	ldr	r3, [pc, #64]	; (8000584 <MX_USART2_UART_Init+0x4c>)
 8000544:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000548:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800054a:	4b0e      	ldr	r3, [pc, #56]	; (8000584 <MX_USART2_UART_Init+0x4c>)
 800054c:	2200      	movs	r2, #0
 800054e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000550:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <MX_USART2_UART_Init+0x4c>)
 8000552:	2200      	movs	r2, #0
 8000554:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000556:	4b0b      	ldr	r3, [pc, #44]	; (8000584 <MX_USART2_UART_Init+0x4c>)
 8000558:	2200      	movs	r2, #0
 800055a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800055c:	4b09      	ldr	r3, [pc, #36]	; (8000584 <MX_USART2_UART_Init+0x4c>)
 800055e:	220c      	movs	r2, #12
 8000560:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000562:	4b08      	ldr	r3, [pc, #32]	; (8000584 <MX_USART2_UART_Init+0x4c>)
 8000564:	2200      	movs	r2, #0
 8000566:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <MX_USART2_UART_Init+0x4c>)
 800056a:	2200      	movs	r2, #0
 800056c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800056e:	4805      	ldr	r0, [pc, #20]	; (8000584 <MX_USART2_UART_Init+0x4c>)
 8000570:	f002 f988 	bl	8002884 <HAL_UART_Init>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800057a:	f000 f839 	bl	80005f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	2000015c 	.word	0x2000015c
 8000588:	40004400 	.word	0x40004400

0800058c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000592:	f107 0308 	add.w	r3, r7, #8
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a0:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <MX_GPIO_Init+0x5c>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	4a10      	ldr	r2, [pc, #64]	; (80005e8 <MX_GPIO_Init+0x5c>)
 80005a6:	f043 0304 	orr.w	r3, r3, #4
 80005aa:	6193      	str	r3, [r2, #24]
 80005ac:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <MX_GPIO_Init+0x5c>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	f003 0304 	and.w	r3, r3, #4
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2120      	movs	r1, #32
 80005bc:	480b      	ldr	r0, [pc, #44]	; (80005ec <MX_GPIO_Init+0x60>)
 80005be:	f001 f87b 	bl	80016b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80005c2:	2320      	movs	r3, #32
 80005c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c6:	2301      	movs	r3, #1
 80005c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	2300      	movs	r3, #0
 80005cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ce:	2302      	movs	r3, #2
 80005d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80005d2:	f107 0308 	add.w	r3, r7, #8
 80005d6:	4619      	mov	r1, r3
 80005d8:	4804      	ldr	r0, [pc, #16]	; (80005ec <MX_GPIO_Init+0x60>)
 80005da:	f000 fef3 	bl	80013c4 <HAL_GPIO_Init>

}
 80005de:	bf00      	nop
 80005e0:	3718      	adds	r7, #24
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40021000 	.word	0x40021000
 80005ec:	40010800 	.word	0x40010800

080005f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f4:	b672      	cpsid	i
}
 80005f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <Error_Handler+0x8>
	...

080005fc <setTimer1>:
int timer2_count = 0;
int timer3_count = 0;



void setTimer1(int duration){
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	timer1_flag = 0;
 8000604:	4b08      	ldr	r3, [pc, #32]	; (8000628 <setTimer1+0x2c>)
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
	timer1_count = duration/TICK;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4a07      	ldr	r2, [pc, #28]	; (800062c <setTimer1+0x30>)
 800060e:	fb82 1203 	smull	r1, r2, r2, r3
 8000612:	1092      	asrs	r2, r2, #2
 8000614:	17db      	asrs	r3, r3, #31
 8000616:	1ad3      	subs	r3, r2, r3
 8000618:	4a05      	ldr	r2, [pc, #20]	; (8000630 <setTimer1+0x34>)
 800061a:	6013      	str	r3, [r2, #0]
}
 800061c:	bf00      	nop
 800061e:	370c      	adds	r7, #12
 8000620:	46bd      	mov	sp, r7
 8000622:	bc80      	pop	{r7}
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	2000009c 	.word	0x2000009c
 800062c:	66666667 	.word	0x66666667
 8000630:	200000a8 	.word	0x200000a8

08000634 <setTimer2>:

void setTimer2(int duration){
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	timer2_flag = 0;
 800063c:	4b08      	ldr	r3, [pc, #32]	; (8000660 <setTimer2+0x2c>)
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
	timer2_count = duration/TICK;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4a07      	ldr	r2, [pc, #28]	; (8000664 <setTimer2+0x30>)
 8000646:	fb82 1203 	smull	r1, r2, r2, r3
 800064a:	1092      	asrs	r2, r2, #2
 800064c:	17db      	asrs	r3, r3, #31
 800064e:	1ad3      	subs	r3, r2, r3
 8000650:	4a05      	ldr	r2, [pc, #20]	; (8000668 <setTimer2+0x34>)
 8000652:	6013      	str	r3, [r2, #0]
}
 8000654:	bf00      	nop
 8000656:	370c      	adds	r7, #12
 8000658:	46bd      	mov	sp, r7
 800065a:	bc80      	pop	{r7}
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	200000a0 	.word	0x200000a0
 8000664:	66666667 	.word	0x66666667
 8000668:	200000ac 	.word	0x200000ac

0800066c <setTimer3>:

void setTimer3(int duration){
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	timer3_flag = 0;
 8000674:	4b08      	ldr	r3, [pc, #32]	; (8000698 <setTimer3+0x2c>)
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
	timer3_count = duration/TICK;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	4a07      	ldr	r2, [pc, #28]	; (800069c <setTimer3+0x30>)
 800067e:	fb82 1203 	smull	r1, r2, r2, r3
 8000682:	1092      	asrs	r2, r2, #2
 8000684:	17db      	asrs	r3, r3, #31
 8000686:	1ad3      	subs	r3, r2, r3
 8000688:	4a05      	ldr	r2, [pc, #20]	; (80006a0 <setTimer3+0x34>)
 800068a:	6013      	str	r3, [r2, #0]
}
 800068c:	bf00      	nop
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	bc80      	pop	{r7}
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	200000a4 	.word	0x200000a4
 800069c:	66666667 	.word	0x66666667
 80006a0:	200000b0 	.word	0x200000b0

080006a4 <timerRun>:

void timerRun(){
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0

	if(timer1_count >0){
 80006a8:	4b19      	ldr	r3, [pc, #100]	; (8000710 <timerRun+0x6c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	dd0b      	ble.n	80006c8 <timerRun+0x24>
		timer1_count--;
 80006b0:	4b17      	ldr	r3, [pc, #92]	; (8000710 <timerRun+0x6c>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	3b01      	subs	r3, #1
 80006b6:	4a16      	ldr	r2, [pc, #88]	; (8000710 <timerRun+0x6c>)
 80006b8:	6013      	str	r3, [r2, #0]
		if(timer1_count<=0){
 80006ba:	4b15      	ldr	r3, [pc, #84]	; (8000710 <timerRun+0x6c>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	dc02      	bgt.n	80006c8 <timerRun+0x24>
			timer1_flag = 1;
 80006c2:	4b14      	ldr	r3, [pc, #80]	; (8000714 <timerRun+0x70>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_count > 0){
 80006c8:	4b13      	ldr	r3, [pc, #76]	; (8000718 <timerRun+0x74>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	dd0b      	ble.n	80006e8 <timerRun+0x44>
		timer2_count--;
 80006d0:	4b11      	ldr	r3, [pc, #68]	; (8000718 <timerRun+0x74>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	3b01      	subs	r3, #1
 80006d6:	4a10      	ldr	r2, [pc, #64]	; (8000718 <timerRun+0x74>)
 80006d8:	6013      	str	r3, [r2, #0]
		if(timer2_count <= 0){
 80006da:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <timerRun+0x74>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	dc02      	bgt.n	80006e8 <timerRun+0x44>
			timer2_flag = 1;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <timerRun+0x78>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_count > 0){
 80006e8:	4b0d      	ldr	r3, [pc, #52]	; (8000720 <timerRun+0x7c>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	dd0b      	ble.n	8000708 <timerRun+0x64>
		timer3_count--;
 80006f0:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <timerRun+0x7c>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	3b01      	subs	r3, #1
 80006f6:	4a0a      	ldr	r2, [pc, #40]	; (8000720 <timerRun+0x7c>)
 80006f8:	6013      	str	r3, [r2, #0]
		if(timer3_count<=0){
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <timerRun+0x7c>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	dc02      	bgt.n	8000708 <timerRun+0x64>
			timer3_flag = 1;
 8000702:	4b08      	ldr	r3, [pc, #32]	; (8000724 <timerRun+0x80>)
 8000704:	2201      	movs	r2, #1
 8000706:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr
 8000710:	200000a8 	.word	0x200000a8
 8000714:	2000009c 	.word	0x2000009c
 8000718:	200000ac 	.word	0x200000ac
 800071c:	200000a0 	.word	0x200000a0
 8000720:	200000b0 	.word	0x200000b0
 8000724:	200000a4 	.word	0x200000a4

08000728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000728:	b480      	push	{r7}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <HAL_MspInit+0x5c>)
 8000730:	699b      	ldr	r3, [r3, #24]
 8000732:	4a14      	ldr	r2, [pc, #80]	; (8000784 <HAL_MspInit+0x5c>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	6193      	str	r3, [r2, #24]
 800073a:	4b12      	ldr	r3, [pc, #72]	; (8000784 <HAL_MspInit+0x5c>)
 800073c:	699b      	ldr	r3, [r3, #24]
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000746:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <HAL_MspInit+0x5c>)
 8000748:	69db      	ldr	r3, [r3, #28]
 800074a:	4a0e      	ldr	r2, [pc, #56]	; (8000784 <HAL_MspInit+0x5c>)
 800074c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000750:	61d3      	str	r3, [r2, #28]
 8000752:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <HAL_MspInit+0x5c>)
 8000754:	69db      	ldr	r3, [r3, #28]
 8000756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800075e:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <HAL_MspInit+0x60>)
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	4a04      	ldr	r2, [pc, #16]	; (8000788 <HAL_MspInit+0x60>)
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077a:	bf00      	nop
 800077c:	3714      	adds	r7, #20
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr
 8000784:	40021000 	.word	0x40021000
 8000788:	40010000 	.word	0x40010000

0800078c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b088      	sub	sp, #32
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000794:	f107 0310 	add.w	r3, r7, #16
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4a14      	ldr	r2, [pc, #80]	; (80007f8 <HAL_ADC_MspInit+0x6c>)
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d121      	bne.n	80007f0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007ac:	4b13      	ldr	r3, [pc, #76]	; (80007fc <HAL_ADC_MspInit+0x70>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	4a12      	ldr	r2, [pc, #72]	; (80007fc <HAL_ADC_MspInit+0x70>)
 80007b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007b6:	6193      	str	r3, [r2, #24]
 80007b8:	4b10      	ldr	r3, [pc, #64]	; (80007fc <HAL_ADC_MspInit+0x70>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c4:	4b0d      	ldr	r3, [pc, #52]	; (80007fc <HAL_ADC_MspInit+0x70>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	4a0c      	ldr	r2, [pc, #48]	; (80007fc <HAL_ADC_MspInit+0x70>)
 80007ca:	f043 0304 	orr.w	r3, r3, #4
 80007ce:	6193      	str	r3, [r2, #24]
 80007d0:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <HAL_ADC_MspInit+0x70>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	f003 0304 	and.w	r3, r3, #4
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007dc:	2301      	movs	r3, #1
 80007de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007e0:	2303      	movs	r3, #3
 80007e2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e4:	f107 0310 	add.w	r3, r7, #16
 80007e8:	4619      	mov	r1, r3
 80007ea:	4805      	ldr	r0, [pc, #20]	; (8000800 <HAL_ADC_MspInit+0x74>)
 80007ec:	f000 fdea 	bl	80013c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80007f0:	bf00      	nop
 80007f2:	3720      	adds	r7, #32
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40012400 	.word	0x40012400
 80007fc:	40021000 	.word	0x40021000
 8000800:	40010800 	.word	0x40010800

08000804 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000814:	d113      	bne.n	800083e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000816:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <HAL_TIM_Base_MspInit+0x44>)
 8000818:	69db      	ldr	r3, [r3, #28]
 800081a:	4a0b      	ldr	r2, [pc, #44]	; (8000848 <HAL_TIM_Base_MspInit+0x44>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	61d3      	str	r3, [r2, #28]
 8000822:	4b09      	ldr	r3, [pc, #36]	; (8000848 <HAL_TIM_Base_MspInit+0x44>)
 8000824:	69db      	ldr	r3, [r3, #28]
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2100      	movs	r1, #0
 8000832:	201c      	movs	r0, #28
 8000834:	f000 fd8f 	bl	8001356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000838:	201c      	movs	r0, #28
 800083a:	f000 fda8 	bl	800138e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800083e:	bf00      	nop
 8000840:	3710      	adds	r7, #16
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40021000 	.word	0x40021000

0800084c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b088      	sub	sp, #32
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000854:	f107 0310 	add.w	r3, r7, #16
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a1b      	ldr	r2, [pc, #108]	; (80008d4 <HAL_UART_MspInit+0x88>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d12f      	bne.n	80008cc <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800086c:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <HAL_UART_MspInit+0x8c>)
 800086e:	69db      	ldr	r3, [r3, #28]
 8000870:	4a19      	ldr	r2, [pc, #100]	; (80008d8 <HAL_UART_MspInit+0x8c>)
 8000872:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000876:	61d3      	str	r3, [r2, #28]
 8000878:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <HAL_UART_MspInit+0x8c>)
 800087a:	69db      	ldr	r3, [r3, #28]
 800087c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000884:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <HAL_UART_MspInit+0x8c>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	4a13      	ldr	r2, [pc, #76]	; (80008d8 <HAL_UART_MspInit+0x8c>)
 800088a:	f043 0304 	orr.w	r3, r3, #4
 800088e:	6193      	str	r3, [r2, #24]
 8000890:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <HAL_UART_MspInit+0x8c>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	f003 0304 	and.w	r3, r3, #4
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800089c:	2304      	movs	r3, #4
 800089e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a0:	2302      	movs	r3, #2
 80008a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008a4:	2303      	movs	r3, #3
 80008a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a8:	f107 0310 	add.w	r3, r7, #16
 80008ac:	4619      	mov	r1, r3
 80008ae:	480b      	ldr	r0, [pc, #44]	; (80008dc <HAL_UART_MspInit+0x90>)
 80008b0:	f000 fd88 	bl	80013c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008b4:	2308      	movs	r3, #8
 80008b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c0:	f107 0310 	add.w	r3, r7, #16
 80008c4:	4619      	mov	r1, r3
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <HAL_UART_MspInit+0x90>)
 80008c8:	f000 fd7c 	bl	80013c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008cc:	bf00      	nop
 80008ce:	3720      	adds	r7, #32
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40004400 	.word	0x40004400
 80008d8:	40021000 	.word	0x40021000
 80008dc:	40010800 	.word	0x40010800

080008e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <NMI_Handler+0x4>

080008e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ea:	e7fe      	b.n	80008ea <HardFault_Handler+0x4>

080008ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <MemManage_Handler+0x4>

080008f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f6:	e7fe      	b.n	80008f6 <BusFault_Handler+0x4>

080008f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <UsageFault_Handler+0x4>

080008fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	46bd      	mov	sp, r7
 8000906:	bc80      	pop	{r7}
 8000908:	4770      	bx	lr

0800090a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	46bd      	mov	sp, r7
 8000912:	bc80      	pop	{r7}
 8000914:	4770      	bx	lr

08000916 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	46bd      	mov	sp, r7
 800091e:	bc80      	pop	{r7}
 8000920:	4770      	bx	lr

08000922 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000926:	f000 f8fd 	bl	8000b24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
	...

08000930 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000934:	4802      	ldr	r0, [pc, #8]	; (8000940 <TIM2_IRQHandler+0x10>)
 8000936:	f001 fc5d 	bl	80021f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000114 	.word	0x20000114

08000944 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800094c:	4a14      	ldr	r2, [pc, #80]	; (80009a0 <_sbrk+0x5c>)
 800094e:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <_sbrk+0x60>)
 8000950:	1ad3      	subs	r3, r2, r3
 8000952:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000958:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <_sbrk+0x64>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d102      	bne.n	8000966 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <_sbrk+0x64>)
 8000962:	4a12      	ldr	r2, [pc, #72]	; (80009ac <_sbrk+0x68>)
 8000964:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <_sbrk+0x64>)
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4413      	add	r3, r2
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	429a      	cmp	r2, r3
 8000972:	d207      	bcs.n	8000984 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000974:	f002 f9a6 	bl	8002cc4 <__errno>
 8000978:	4603      	mov	r3, r0
 800097a:	220c      	movs	r2, #12
 800097c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800097e:	f04f 33ff 	mov.w	r3, #4294967295
 8000982:	e009      	b.n	8000998 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000984:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <_sbrk+0x64>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800098a:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <_sbrk+0x64>)
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4413      	add	r3, r2
 8000992:	4a05      	ldr	r2, [pc, #20]	; (80009a8 <_sbrk+0x64>)
 8000994:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000996:	68fb      	ldr	r3, [r7, #12]
}
 8000998:	4618      	mov	r0, r3
 800099a:	3718      	adds	r7, #24
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20002800 	.word	0x20002800
 80009a4:	00000400 	.word	0x00000400
 80009a8:	200000b4 	.word	0x200000b4
 80009ac:	200001b8 	.word	0x200001b8

080009b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bc80      	pop	{r7}
 80009ba:	4770      	bx	lr

080009bc <uart_communiation_fsm>:
 *      Author: LUUVINHLOI
 */

#include "uart.h"

void uart_communiation_fsm(void){
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
	switch(sensor) {
 80009c0:	4b1f      	ldr	r3, [pc, #124]	; (8000a40 <uart_communiation_fsm+0x84>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	3b01      	subs	r3, #1
 80009c6:	2b03      	cmp	r3, #3
 80009c8:	d838      	bhi.n	8000a3c <uart_communiation_fsm+0x80>
 80009ca:	a201      	add	r2, pc, #4	; (adr r2, 80009d0 <uart_communiation_fsm+0x14>)
 80009cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d0:	080009e1 	.word	0x080009e1
 80009d4:	080009ef 	.word	0x080009ef
 80009d8:	08000a13 	.word	0x08000a13
 80009dc:	08000a23 	.word	0x08000a23
		case READER_INIT:
			setTimer2(TICK);
 80009e0:	200a      	movs	r0, #10
 80009e2:	f7ff fe27 	bl	8000634 <setTimer2>
			sensor = READER_READ;
 80009e6:	4b16      	ldr	r3, [pc, #88]	; (8000a40 <uart_communiation_fsm+0x84>)
 80009e8:	2202      	movs	r2, #2
 80009ea:	701a      	strb	r2, [r3, #0]
		break;
 80009ec:	e026      	b.n	8000a3c <uart_communiation_fsm+0x80>

		case READER_READ:
			if(print == 0) {
 80009ee:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <uart_communiation_fsm+0x88>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d102      	bne.n	80009fc <uart_communiation_fsm+0x40>
				sensor = READER_WAIT;
 80009f6:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <uart_communiation_fsm+0x84>)
 80009f8:	2203      	movs	r2, #3
 80009fa:	701a      	strb	r2, [r3, #0]
			}

			if(timer2_flag == 1) {
 80009fc:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <uart_communiation_fsm+0x8c>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d118      	bne.n	8000a36 <uart_communiation_fsm+0x7a>
				setTimer2(SENSOR_READ_PERIOD);
 8000a04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a08:	f7ff fe14 	bl	8000634 <setTimer2>
				readSensor();
 8000a0c:	f7ff fc5a 	bl	80002c4 <readSensor>
			}
		break;
 8000a10:	e011      	b.n	8000a36 <uart_communiation_fsm+0x7a>

		case READER_WAIT:
			if(print == 1) {
 8000a12:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <uart_communiation_fsm+0x88>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d10f      	bne.n	8000a3a <uart_communiation_fsm+0x7e>
				sensor = READER_PRINT;
 8000a1a:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <uart_communiation_fsm+0x84>)
 8000a1c:	2204      	movs	r2, #4
 8000a1e:	701a      	strb	r2, [r3, #0]
			}
		break;
 8000a20:	e00b      	b.n	8000a3a <uart_communiation_fsm+0x7e>

		case READER_PRINT:
			setTimer2(SENSOR_READ_PERIOD);
 8000a22:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a26:	f7ff fe05 	bl	8000634 <setTimer2>
			readSensor();
 8000a2a:	f7ff fc4b 	bl	80002c4 <readSensor>
			sensor = READER_READ;
 8000a2e:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <uart_communiation_fsm+0x84>)
 8000a30:	2202      	movs	r2, #2
 8000a32:	701a      	strb	r2, [r3, #0]
			break;
 8000a34:	e002      	b.n	8000a3c <uart_communiation_fsm+0x80>
		break;
 8000a36:	bf00      	nop
 8000a38:	e000      	b.n	8000a3c <uart_communiation_fsm+0x80>
		break;
 8000a3a:	bf00      	nop
	}
}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20000002 	.word	0x20000002
 8000a44:	20000099 	.word	0x20000099
 8000a48:	200000a0 	.word	0x200000a0

08000a4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a4c:	480c      	ldr	r0, [pc, #48]	; (8000a80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a4e:	490d      	ldr	r1, [pc, #52]	; (8000a84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a50:	4a0d      	ldr	r2, [pc, #52]	; (8000a88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a54:	e002      	b.n	8000a5c <LoopCopyDataInit>

08000a56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a5a:	3304      	adds	r3, #4

08000a5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a60:	d3f9      	bcc.n	8000a56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a62:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a64:	4c0a      	ldr	r4, [pc, #40]	; (8000a90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a68:	e001      	b.n	8000a6e <LoopFillZerobss>

08000a6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a6c:	3204      	adds	r2, #4

08000a6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a70:	d3fb      	bcc.n	8000a6a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a72:	f7ff ff9d 	bl	80009b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a76:	f002 f92b 	bl	8002cd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a7a:	f7ff fc47 	bl	800030c <main>
  bx lr
 8000a7e:	4770      	bx	lr
  ldr r0, =_sdata
 8000a80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a84:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000a88:	08003624 	.word	0x08003624
  ldr r2, =_sbss
 8000a8c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000a90:	200001b4 	.word	0x200001b4

08000a94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a94:	e7fe      	b.n	8000a94 <ADC1_2_IRQHandler>
	...

08000a98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a9c:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <HAL_Init+0x28>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a07      	ldr	r2, [pc, #28]	; (8000ac0 <HAL_Init+0x28>)
 8000aa2:	f043 0310 	orr.w	r3, r3, #16
 8000aa6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa8:	2003      	movs	r0, #3
 8000aaa:	f000 fc49 	bl	8001340 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aae:	200f      	movs	r0, #15
 8000ab0:	f000 f808 	bl	8000ac4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ab4:	f7ff fe38 	bl	8000728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab8:	2300      	movs	r3, #0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40022000 	.word	0x40022000

08000ac4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000acc:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <HAL_InitTick+0x54>)
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <HAL_InitTick+0x58>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ada:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 fc61 	bl	80013aa <HAL_SYSTICK_Config>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	e00e      	b.n	8000b10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2b0f      	cmp	r3, #15
 8000af6:	d80a      	bhi.n	8000b0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af8:	2200      	movs	r2, #0
 8000afa:	6879      	ldr	r1, [r7, #4]
 8000afc:	f04f 30ff 	mov.w	r0, #4294967295
 8000b00:	f000 fc29 	bl	8001356 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b04:	4a06      	ldr	r2, [pc, #24]	; (8000b20 <HAL_InitTick+0x5c>)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	e000      	b.n	8000b10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000004 	.word	0x20000004
 8000b1c:	2000000c 	.word	0x2000000c
 8000b20:	20000008 	.word	0x20000008

08000b24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b28:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <HAL_IncTick+0x1c>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <HAL_IncTick+0x20>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4413      	add	r3, r2
 8000b34:	4a03      	ldr	r2, [pc, #12]	; (8000b44 <HAL_IncTick+0x20>)
 8000b36:	6013      	str	r3, [r2, #0]
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr
 8000b40:	2000000c 	.word	0x2000000c
 8000b44:	200001a0 	.word	0x200001a0

08000b48 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b4c:	4b02      	ldr	r3, [pc, #8]	; (8000b58 <HAL_GetTick+0x10>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr
 8000b58:	200001a0 	.word	0x200001a0

08000b5c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b64:	2300      	movs	r3, #0
 8000b66:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d101      	bne.n	8000b7e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e0be      	b.n	8000cfc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d109      	bne.n	8000ba0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2200      	movs	r2, #0
 8000b90:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2200      	movs	r2, #0
 8000b96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff fdf6 	bl	800078c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f000 fabf 	bl	8001124 <ADC_ConversionStop_Disable>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bae:	f003 0310 	and.w	r3, r3, #16
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	f040 8099 	bne.w	8000cea <HAL_ADC_Init+0x18e>
 8000bb8:	7dfb      	ldrb	r3, [r7, #23]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	f040 8095 	bne.w	8000cea <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bc4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000bc8:	f023 0302 	bic.w	r3, r3, #2
 8000bcc:	f043 0202 	orr.w	r2, r3, #2
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bdc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	7b1b      	ldrb	r3, [r3, #12]
 8000be2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000be4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000be6:	68ba      	ldr	r2, [r7, #8]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	689b      	ldr	r3, [r3, #8]
 8000bf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bf4:	d003      	beq.n	8000bfe <HAL_ADC_Init+0xa2>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	689b      	ldr	r3, [r3, #8]
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d102      	bne.n	8000c04 <HAL_ADC_Init+0xa8>
 8000bfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c02:	e000      	b.n	8000c06 <HAL_ADC_Init+0xaa>
 8000c04:	2300      	movs	r3, #0
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	7d1b      	ldrb	r3, [r3, #20]
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d119      	bne.n	8000c48 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	7b1b      	ldrb	r3, [r3, #12]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d109      	bne.n	8000c30 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	3b01      	subs	r3, #1
 8000c22:	035a      	lsls	r2, r3, #13
 8000c24:	693b      	ldr	r3, [r7, #16]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c2c:	613b      	str	r3, [r7, #16]
 8000c2e:	e00b      	b.n	8000c48 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c34:	f043 0220 	orr.w	r2, r3, #32
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c40:	f043 0201 	orr.w	r2, r3, #1
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	689a      	ldr	r2, [r3, #8]
 8000c62:	4b28      	ldr	r3, [pc, #160]	; (8000d04 <HAL_ADC_Init+0x1a8>)
 8000c64:	4013      	ands	r3, r2
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	6812      	ldr	r2, [r2, #0]
 8000c6a:	68b9      	ldr	r1, [r7, #8]
 8000c6c:	430b      	orrs	r3, r1
 8000c6e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c78:	d003      	beq.n	8000c82 <HAL_ADC_Init+0x126>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d104      	bne.n	8000c8c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	691b      	ldr	r3, [r3, #16]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	051b      	lsls	r3, r3, #20
 8000c8a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c92:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	68fa      	ldr	r2, [r7, #12]
 8000c9c:	430a      	orrs	r2, r1
 8000c9e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	689a      	ldr	r2, [r3, #8]
 8000ca6:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <HAL_ADC_Init+0x1ac>)
 8000ca8:	4013      	ands	r3, r2
 8000caa:	68ba      	ldr	r2, [r7, #8]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d10b      	bne.n	8000cc8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cba:	f023 0303 	bic.w	r3, r3, #3
 8000cbe:	f043 0201 	orr.w	r2, r3, #1
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cc6:	e018      	b.n	8000cfa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ccc:	f023 0312 	bic.w	r3, r3, #18
 8000cd0:	f043 0210 	orr.w	r2, r3, #16
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cdc:	f043 0201 	orr.w	r2, r3, #1
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ce8:	e007      	b.n	8000cfa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cee:	f043 0210 	orr.w	r2, r3, #16
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3718      	adds	r7, #24
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	ffe1f7fd 	.word	0xffe1f7fd
 8000d08:	ff1f0efe 	.word	0xff1f0efe

08000d0c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d14:	2300      	movs	r3, #0
 8000d16:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d101      	bne.n	8000d26 <HAL_ADC_Start+0x1a>
 8000d22:	2302      	movs	r3, #2
 8000d24:	e098      	b.n	8000e58 <HAL_ADC_Start+0x14c>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2201      	movs	r2, #1
 8000d2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f000 f99e 	bl	8001070 <ADC_Enable>
 8000d34:	4603      	mov	r3, r0
 8000d36:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000d38:	7bfb      	ldrb	r3, [r7, #15]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	f040 8087 	bne.w	8000e4e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d48:	f023 0301 	bic.w	r3, r3, #1
 8000d4c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a41      	ldr	r2, [pc, #260]	; (8000e60 <HAL_ADC_Start+0x154>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d105      	bne.n	8000d6a <HAL_ADC_Start+0x5e>
 8000d5e:	4b41      	ldr	r3, [pc, #260]	; (8000e64 <HAL_ADC_Start+0x158>)
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d115      	bne.n	8000d96 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d6e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d026      	beq.n	8000dd2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d88:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d8c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d94:	e01d      	b.n	8000dd2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d9a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a2f      	ldr	r2, [pc, #188]	; (8000e64 <HAL_ADC_Start+0x158>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d004      	beq.n	8000db6 <HAL_ADC_Start+0xaa>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a2b      	ldr	r2, [pc, #172]	; (8000e60 <HAL_ADC_Start+0x154>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d10d      	bne.n	8000dd2 <HAL_ADC_Start+0xc6>
 8000db6:	4b2b      	ldr	r3, [pc, #172]	; (8000e64 <HAL_ADC_Start+0x158>)
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d007      	beq.n	8000dd2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000dca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d006      	beq.n	8000dec <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000de2:	f023 0206 	bic.w	r2, r3, #6
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dea:	e002      	b.n	8000df2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2200      	movs	r2, #0
 8000df0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2200      	movs	r2, #0
 8000df6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f06f 0202 	mvn.w	r2, #2
 8000e02:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000e0e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000e12:	d113      	bne.n	8000e3c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e18:	4a11      	ldr	r2, [pc, #68]	; (8000e60 <HAL_ADC_Start+0x154>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d105      	bne.n	8000e2a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e1e:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <HAL_ADC_Start+0x158>)
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d108      	bne.n	8000e3c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	689a      	ldr	r2, [r3, #8]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000e38:	609a      	str	r2, [r3, #8]
 8000e3a:	e00c      	b.n	8000e56 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	689a      	ldr	r2, [r3, #8]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	e003      	b.n	8000e56 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2200      	movs	r2, #0
 8000e52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3710      	adds	r7, #16
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40012800 	.word	0x40012800
 8000e64:	40012400 	.word	0x40012400

08000e68 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bc80      	pop	{r7}
 8000e7e:	4770      	bx	lr

08000e80 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d101      	bne.n	8000ea0 <HAL_ADC_ConfigChannel+0x20>
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	e0dc      	b.n	800105a <HAL_ADC_ConfigChannel+0x1da>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	2b06      	cmp	r3, #6
 8000eae:	d81c      	bhi.n	8000eea <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685a      	ldr	r2, [r3, #4]
 8000eba:	4613      	mov	r3, r2
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	4413      	add	r3, r2
 8000ec0:	3b05      	subs	r3, #5
 8000ec2:	221f      	movs	r2, #31
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	4019      	ands	r1, r3
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	6818      	ldr	r0, [r3, #0]
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685a      	ldr	r2, [r3, #4]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	4413      	add	r3, r2
 8000eda:	3b05      	subs	r3, #5
 8000edc:	fa00 f203 	lsl.w	r2, r0, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	635a      	str	r2, [r3, #52]	; 0x34
 8000ee8:	e03c      	b.n	8000f64 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	2b0c      	cmp	r3, #12
 8000ef0:	d81c      	bhi.n	8000f2c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685a      	ldr	r2, [r3, #4]
 8000efc:	4613      	mov	r3, r2
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	4413      	add	r3, r2
 8000f02:	3b23      	subs	r3, #35	; 0x23
 8000f04:	221f      	movs	r2, #31
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	4019      	ands	r1, r3
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	6818      	ldr	r0, [r3, #0]
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685a      	ldr	r2, [r3, #4]
 8000f16:	4613      	mov	r3, r2
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	4413      	add	r3, r2
 8000f1c:	3b23      	subs	r3, #35	; 0x23
 8000f1e:	fa00 f203 	lsl.w	r2, r0, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	430a      	orrs	r2, r1
 8000f28:	631a      	str	r2, [r3, #48]	; 0x30
 8000f2a:	e01b      	b.n	8000f64 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685a      	ldr	r2, [r3, #4]
 8000f36:	4613      	mov	r3, r2
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	4413      	add	r3, r2
 8000f3c:	3b41      	subs	r3, #65	; 0x41
 8000f3e:	221f      	movs	r2, #31
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	4019      	ands	r1, r3
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	6818      	ldr	r0, [r3, #0]
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685a      	ldr	r2, [r3, #4]
 8000f50:	4613      	mov	r3, r2
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	4413      	add	r3, r2
 8000f56:	3b41      	subs	r3, #65	; 0x41
 8000f58:	fa00 f203 	lsl.w	r2, r0, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	430a      	orrs	r2, r1
 8000f62:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b09      	cmp	r3, #9
 8000f6a:	d91c      	bls.n	8000fa6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	68d9      	ldr	r1, [r3, #12]
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	4613      	mov	r3, r2
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	4413      	add	r3, r2
 8000f7c:	3b1e      	subs	r3, #30
 8000f7e:	2207      	movs	r2, #7
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	4019      	ands	r1, r3
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	6898      	ldr	r0, [r3, #8]
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	4613      	mov	r3, r2
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	4413      	add	r3, r2
 8000f96:	3b1e      	subs	r3, #30
 8000f98:	fa00 f203 	lsl.w	r2, r0, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	60da      	str	r2, [r3, #12]
 8000fa4:	e019      	b.n	8000fda <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	6919      	ldr	r1, [r3, #16]
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	4413      	add	r3, r2
 8000fb6:	2207      	movs	r2, #7
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	4019      	ands	r1, r3
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	6898      	ldr	r0, [r3, #8]
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	4413      	add	r3, r2
 8000fce:	fa00 f203 	lsl.w	r2, r0, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2b10      	cmp	r3, #16
 8000fe0:	d003      	beq.n	8000fea <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000fe6:	2b11      	cmp	r3, #17
 8000fe8:	d132      	bne.n	8001050 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a1d      	ldr	r2, [pc, #116]	; (8001064 <HAL_ADC_ConfigChannel+0x1e4>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d125      	bne.n	8001040 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d126      	bne.n	8001050 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	689a      	ldr	r2, [r3, #8]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001010:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b10      	cmp	r3, #16
 8001018:	d11a      	bne.n	8001050 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800101a:	4b13      	ldr	r3, [pc, #76]	; (8001068 <HAL_ADC_ConfigChannel+0x1e8>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a13      	ldr	r2, [pc, #76]	; (800106c <HAL_ADC_ConfigChannel+0x1ec>)
 8001020:	fba2 2303 	umull	r2, r3, r2, r3
 8001024:	0c9a      	lsrs	r2, r3, #18
 8001026:	4613      	mov	r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	4413      	add	r3, r2
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001030:	e002      	b.n	8001038 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	3b01      	subs	r3, #1
 8001036:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d1f9      	bne.n	8001032 <HAL_ADC_ConfigChannel+0x1b2>
 800103e:	e007      	b.n	8001050 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001044:	f043 0220 	orr.w	r2, r3, #32
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2200      	movs	r2, #0
 8001054:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001058:	7bfb      	ldrb	r3, [r7, #15]
}
 800105a:	4618      	mov	r0, r3
 800105c:	3714      	adds	r7, #20
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr
 8001064:	40012400 	.word	0x40012400
 8001068:	20000004 	.word	0x20000004
 800106c:	431bde83 	.word	0x431bde83

08001070 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001078:	2300      	movs	r3, #0
 800107a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800107c:	2300      	movs	r3, #0
 800107e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	2b01      	cmp	r3, #1
 800108c:	d040      	beq.n	8001110 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	689a      	ldr	r2, [r3, #8]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f042 0201 	orr.w	r2, r2, #1
 800109c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800109e:	4b1f      	ldr	r3, [pc, #124]	; (800111c <ADC_Enable+0xac>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a1f      	ldr	r2, [pc, #124]	; (8001120 <ADC_Enable+0xb0>)
 80010a4:	fba2 2303 	umull	r2, r3, r2, r3
 80010a8:	0c9b      	lsrs	r3, r3, #18
 80010aa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80010ac:	e002      	b.n	80010b4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	3b01      	subs	r3, #1
 80010b2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d1f9      	bne.n	80010ae <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80010ba:	f7ff fd45 	bl	8000b48 <HAL_GetTick>
 80010be:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80010c0:	e01f      	b.n	8001102 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80010c2:	f7ff fd41 	bl	8000b48 <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d918      	bls.n	8001102 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d011      	beq.n	8001102 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e2:	f043 0210 	orr.w	r2, r3, #16
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ee:	f043 0201 	orr.w	r2, r3, #1
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e007      	b.n	8001112 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	2b01      	cmp	r3, #1
 800110e:	d1d8      	bne.n	80010c2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000004 	.word	0x20000004
 8001120:	431bde83 	.word	0x431bde83

08001124 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800112c:	2300      	movs	r3, #0
 800112e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	2b01      	cmp	r3, #1
 800113c:	d12e      	bne.n	800119c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	689a      	ldr	r2, [r3, #8]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f022 0201 	bic.w	r2, r2, #1
 800114c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800114e:	f7ff fcfb 	bl	8000b48 <HAL_GetTick>
 8001152:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001154:	e01b      	b.n	800118e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001156:	f7ff fcf7 	bl	8000b48 <HAL_GetTick>
 800115a:	4602      	mov	r2, r0
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	2b02      	cmp	r3, #2
 8001162:	d914      	bls.n	800118e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	2b01      	cmp	r3, #1
 8001170:	d10d      	bne.n	800118e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001176:	f043 0210 	orr.w	r2, r3, #16
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001182:	f043 0201 	orr.w	r2, r3, #1
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e007      	b.n	800119e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	2b01      	cmp	r3, #1
 800119a:	d0dc      	beq.n	8001156 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b8:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <__NVIC_SetPriorityGrouping+0x44>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011be:	68ba      	ldr	r2, [r7, #8]
 80011c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011c4:	4013      	ands	r3, r2
 80011c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011da:	4a04      	ldr	r2, [pc, #16]	; (80011ec <__NVIC_SetPriorityGrouping+0x44>)
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	60d3      	str	r3, [r2, #12]
}
 80011e0:	bf00      	nop
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f4:	4b04      	ldr	r3, [pc, #16]	; (8001208 <__NVIC_GetPriorityGrouping+0x18>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	0a1b      	lsrs	r3, r3, #8
 80011fa:	f003 0307 	and.w	r3, r3, #7
}
 80011fe:	4618      	mov	r0, r3
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	2b00      	cmp	r3, #0
 800121c:	db0b      	blt.n	8001236 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	f003 021f 	and.w	r2, r3, #31
 8001224:	4906      	ldr	r1, [pc, #24]	; (8001240 <__NVIC_EnableIRQ+0x34>)
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	095b      	lsrs	r3, r3, #5
 800122c:	2001      	movs	r0, #1
 800122e:	fa00 f202 	lsl.w	r2, r0, r2
 8001232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr
 8001240:	e000e100 	.word	0xe000e100

08001244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	6039      	str	r1, [r7, #0]
 800124e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001254:	2b00      	cmp	r3, #0
 8001256:	db0a      	blt.n	800126e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	b2da      	uxtb	r2, r3
 800125c:	490c      	ldr	r1, [pc, #48]	; (8001290 <__NVIC_SetPriority+0x4c>)
 800125e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001262:	0112      	lsls	r2, r2, #4
 8001264:	b2d2      	uxtb	r2, r2
 8001266:	440b      	add	r3, r1
 8001268:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800126c:	e00a      	b.n	8001284 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	b2da      	uxtb	r2, r3
 8001272:	4908      	ldr	r1, [pc, #32]	; (8001294 <__NVIC_SetPriority+0x50>)
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	f003 030f 	and.w	r3, r3, #15
 800127a:	3b04      	subs	r3, #4
 800127c:	0112      	lsls	r2, r2, #4
 800127e:	b2d2      	uxtb	r2, r2
 8001280:	440b      	add	r3, r1
 8001282:	761a      	strb	r2, [r3, #24]
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	bc80      	pop	{r7}
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	e000e100 	.word	0xe000e100
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001298:	b480      	push	{r7}
 800129a:	b089      	sub	sp, #36	; 0x24
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	f1c3 0307 	rsb	r3, r3, #7
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	bf28      	it	cs
 80012b6:	2304      	movcs	r3, #4
 80012b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3304      	adds	r3, #4
 80012be:	2b06      	cmp	r3, #6
 80012c0:	d902      	bls.n	80012c8 <NVIC_EncodePriority+0x30>
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	3b03      	subs	r3, #3
 80012c6:	e000      	b.n	80012ca <NVIC_EncodePriority+0x32>
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012cc:	f04f 32ff 	mov.w	r2, #4294967295
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43da      	mvns	r2, r3
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	401a      	ands	r2, r3
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e0:	f04f 31ff 	mov.w	r1, #4294967295
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ea:	43d9      	mvns	r1, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f0:	4313      	orrs	r3, r2
         );
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3724      	adds	r7, #36	; 0x24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr

080012fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3b01      	subs	r3, #1
 8001308:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800130c:	d301      	bcc.n	8001312 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800130e:	2301      	movs	r3, #1
 8001310:	e00f      	b.n	8001332 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001312:	4a0a      	ldr	r2, [pc, #40]	; (800133c <SysTick_Config+0x40>)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3b01      	subs	r3, #1
 8001318:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800131a:	210f      	movs	r1, #15
 800131c:	f04f 30ff 	mov.w	r0, #4294967295
 8001320:	f7ff ff90 	bl	8001244 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001324:	4b05      	ldr	r3, [pc, #20]	; (800133c <SysTick_Config+0x40>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800132a:	4b04      	ldr	r3, [pc, #16]	; (800133c <SysTick_Config+0x40>)
 800132c:	2207      	movs	r2, #7
 800132e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	e000e010 	.word	0xe000e010

08001340 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f7ff ff2d 	bl	80011a8 <__NVIC_SetPriorityGrouping>
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001356:	b580      	push	{r7, lr}
 8001358:	b086      	sub	sp, #24
 800135a:	af00      	add	r7, sp, #0
 800135c:	4603      	mov	r3, r0
 800135e:	60b9      	str	r1, [r7, #8]
 8001360:	607a      	str	r2, [r7, #4]
 8001362:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001368:	f7ff ff42 	bl	80011f0 <__NVIC_GetPriorityGrouping>
 800136c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	68b9      	ldr	r1, [r7, #8]
 8001372:	6978      	ldr	r0, [r7, #20]
 8001374:	f7ff ff90 	bl	8001298 <NVIC_EncodePriority>
 8001378:	4602      	mov	r2, r0
 800137a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800137e:	4611      	mov	r1, r2
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ff5f 	bl	8001244 <__NVIC_SetPriority>
}
 8001386:	bf00      	nop
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	4603      	mov	r3, r0
 8001396:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff ff35 	bl	800120c <__NVIC_EnableIRQ>
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b082      	sub	sp, #8
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff ffa2 	bl	80012fc <SysTick_Config>
 80013b8:	4603      	mov	r3, r0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b08b      	sub	sp, #44	; 0x2c
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013ce:	2300      	movs	r3, #0
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013d2:	2300      	movs	r3, #0
 80013d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013d6:	e148      	b.n	800166a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013d8:	2201      	movs	r2, #1
 80013da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	69fa      	ldr	r2, [r7, #28]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	f040 8137 	bne.w	8001664 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	4aa3      	ldr	r2, [pc, #652]	; (8001688 <HAL_GPIO_Init+0x2c4>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d05e      	beq.n	80014be <HAL_GPIO_Init+0xfa>
 8001400:	4aa1      	ldr	r2, [pc, #644]	; (8001688 <HAL_GPIO_Init+0x2c4>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d875      	bhi.n	80014f2 <HAL_GPIO_Init+0x12e>
 8001406:	4aa1      	ldr	r2, [pc, #644]	; (800168c <HAL_GPIO_Init+0x2c8>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d058      	beq.n	80014be <HAL_GPIO_Init+0xfa>
 800140c:	4a9f      	ldr	r2, [pc, #636]	; (800168c <HAL_GPIO_Init+0x2c8>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d86f      	bhi.n	80014f2 <HAL_GPIO_Init+0x12e>
 8001412:	4a9f      	ldr	r2, [pc, #636]	; (8001690 <HAL_GPIO_Init+0x2cc>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d052      	beq.n	80014be <HAL_GPIO_Init+0xfa>
 8001418:	4a9d      	ldr	r2, [pc, #628]	; (8001690 <HAL_GPIO_Init+0x2cc>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d869      	bhi.n	80014f2 <HAL_GPIO_Init+0x12e>
 800141e:	4a9d      	ldr	r2, [pc, #628]	; (8001694 <HAL_GPIO_Init+0x2d0>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d04c      	beq.n	80014be <HAL_GPIO_Init+0xfa>
 8001424:	4a9b      	ldr	r2, [pc, #620]	; (8001694 <HAL_GPIO_Init+0x2d0>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d863      	bhi.n	80014f2 <HAL_GPIO_Init+0x12e>
 800142a:	4a9b      	ldr	r2, [pc, #620]	; (8001698 <HAL_GPIO_Init+0x2d4>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d046      	beq.n	80014be <HAL_GPIO_Init+0xfa>
 8001430:	4a99      	ldr	r2, [pc, #612]	; (8001698 <HAL_GPIO_Init+0x2d4>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d85d      	bhi.n	80014f2 <HAL_GPIO_Init+0x12e>
 8001436:	2b12      	cmp	r3, #18
 8001438:	d82a      	bhi.n	8001490 <HAL_GPIO_Init+0xcc>
 800143a:	2b12      	cmp	r3, #18
 800143c:	d859      	bhi.n	80014f2 <HAL_GPIO_Init+0x12e>
 800143e:	a201      	add	r2, pc, #4	; (adr r2, 8001444 <HAL_GPIO_Init+0x80>)
 8001440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001444:	080014bf 	.word	0x080014bf
 8001448:	08001499 	.word	0x08001499
 800144c:	080014ab 	.word	0x080014ab
 8001450:	080014ed 	.word	0x080014ed
 8001454:	080014f3 	.word	0x080014f3
 8001458:	080014f3 	.word	0x080014f3
 800145c:	080014f3 	.word	0x080014f3
 8001460:	080014f3 	.word	0x080014f3
 8001464:	080014f3 	.word	0x080014f3
 8001468:	080014f3 	.word	0x080014f3
 800146c:	080014f3 	.word	0x080014f3
 8001470:	080014f3 	.word	0x080014f3
 8001474:	080014f3 	.word	0x080014f3
 8001478:	080014f3 	.word	0x080014f3
 800147c:	080014f3 	.word	0x080014f3
 8001480:	080014f3 	.word	0x080014f3
 8001484:	080014f3 	.word	0x080014f3
 8001488:	080014a1 	.word	0x080014a1
 800148c:	080014b5 	.word	0x080014b5
 8001490:	4a82      	ldr	r2, [pc, #520]	; (800169c <HAL_GPIO_Init+0x2d8>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d013      	beq.n	80014be <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001496:	e02c      	b.n	80014f2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	623b      	str	r3, [r7, #32]
          break;
 800149e:	e029      	b.n	80014f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	3304      	adds	r3, #4
 80014a6:	623b      	str	r3, [r7, #32]
          break;
 80014a8:	e024      	b.n	80014f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	3308      	adds	r3, #8
 80014b0:	623b      	str	r3, [r7, #32]
          break;
 80014b2:	e01f      	b.n	80014f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	330c      	adds	r3, #12
 80014ba:	623b      	str	r3, [r7, #32]
          break;
 80014bc:	e01a      	b.n	80014f4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d102      	bne.n	80014cc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014c6:	2304      	movs	r3, #4
 80014c8:	623b      	str	r3, [r7, #32]
          break;
 80014ca:	e013      	b.n	80014f4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d105      	bne.n	80014e0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014d4:	2308      	movs	r3, #8
 80014d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	69fa      	ldr	r2, [r7, #28]
 80014dc:	611a      	str	r2, [r3, #16]
          break;
 80014de:	e009      	b.n	80014f4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014e0:	2308      	movs	r3, #8
 80014e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	69fa      	ldr	r2, [r7, #28]
 80014e8:	615a      	str	r2, [r3, #20]
          break;
 80014ea:	e003      	b.n	80014f4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014ec:	2300      	movs	r3, #0
 80014ee:	623b      	str	r3, [r7, #32]
          break;
 80014f0:	e000      	b.n	80014f4 <HAL_GPIO_Init+0x130>
          break;
 80014f2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	2bff      	cmp	r3, #255	; 0xff
 80014f8:	d801      	bhi.n	80014fe <HAL_GPIO_Init+0x13a>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	e001      	b.n	8001502 <HAL_GPIO_Init+0x13e>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	3304      	adds	r3, #4
 8001502:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	2bff      	cmp	r3, #255	; 0xff
 8001508:	d802      	bhi.n	8001510 <HAL_GPIO_Init+0x14c>
 800150a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	e002      	b.n	8001516 <HAL_GPIO_Init+0x152>
 8001510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001512:	3b08      	subs	r3, #8
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	210f      	movs	r1, #15
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	fa01 f303 	lsl.w	r3, r1, r3
 8001524:	43db      	mvns	r3, r3
 8001526:	401a      	ands	r2, r3
 8001528:	6a39      	ldr	r1, [r7, #32]
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	fa01 f303 	lsl.w	r3, r1, r3
 8001530:	431a      	orrs	r2, r3
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153e:	2b00      	cmp	r3, #0
 8001540:	f000 8090 	beq.w	8001664 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001544:	4b56      	ldr	r3, [pc, #344]	; (80016a0 <HAL_GPIO_Init+0x2dc>)
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	4a55      	ldr	r2, [pc, #340]	; (80016a0 <HAL_GPIO_Init+0x2dc>)
 800154a:	f043 0301 	orr.w	r3, r3, #1
 800154e:	6193      	str	r3, [r2, #24]
 8001550:	4b53      	ldr	r3, [pc, #332]	; (80016a0 <HAL_GPIO_Init+0x2dc>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800155c:	4a51      	ldr	r2, [pc, #324]	; (80016a4 <HAL_GPIO_Init+0x2e0>)
 800155e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001560:	089b      	lsrs	r3, r3, #2
 8001562:	3302      	adds	r3, #2
 8001564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001568:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800156a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156c:	f003 0303 	and.w	r3, r3, #3
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	220f      	movs	r2, #15
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	43db      	mvns	r3, r3
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	4013      	ands	r3, r2
 800157e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a49      	ldr	r2, [pc, #292]	; (80016a8 <HAL_GPIO_Init+0x2e4>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d00d      	beq.n	80015a4 <HAL_GPIO_Init+0x1e0>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a48      	ldr	r2, [pc, #288]	; (80016ac <HAL_GPIO_Init+0x2e8>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d007      	beq.n	80015a0 <HAL_GPIO_Init+0x1dc>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4a47      	ldr	r2, [pc, #284]	; (80016b0 <HAL_GPIO_Init+0x2ec>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d101      	bne.n	800159c <HAL_GPIO_Init+0x1d8>
 8001598:	2302      	movs	r3, #2
 800159a:	e004      	b.n	80015a6 <HAL_GPIO_Init+0x1e2>
 800159c:	2303      	movs	r3, #3
 800159e:	e002      	b.n	80015a6 <HAL_GPIO_Init+0x1e2>
 80015a0:	2301      	movs	r3, #1
 80015a2:	e000      	b.n	80015a6 <HAL_GPIO_Init+0x1e2>
 80015a4:	2300      	movs	r3, #0
 80015a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015a8:	f002 0203 	and.w	r2, r2, #3
 80015ac:	0092      	lsls	r2, r2, #2
 80015ae:	4093      	lsls	r3, r2
 80015b0:	68fa      	ldr	r2, [r7, #12]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015b6:	493b      	ldr	r1, [pc, #236]	; (80016a4 <HAL_GPIO_Init+0x2e0>)
 80015b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ba:	089b      	lsrs	r3, r3, #2
 80015bc:	3302      	adds	r3, #2
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d006      	beq.n	80015de <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015d0:	4b38      	ldr	r3, [pc, #224]	; (80016b4 <HAL_GPIO_Init+0x2f0>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4937      	ldr	r1, [pc, #220]	; (80016b4 <HAL_GPIO_Init+0x2f0>)
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	4313      	orrs	r3, r2
 80015da:	600b      	str	r3, [r1, #0]
 80015dc:	e006      	b.n	80015ec <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015de:	4b35      	ldr	r3, [pc, #212]	; (80016b4 <HAL_GPIO_Init+0x2f0>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	43db      	mvns	r3, r3
 80015e6:	4933      	ldr	r1, [pc, #204]	; (80016b4 <HAL_GPIO_Init+0x2f0>)
 80015e8:	4013      	ands	r3, r2
 80015ea:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d006      	beq.n	8001606 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015f8:	4b2e      	ldr	r3, [pc, #184]	; (80016b4 <HAL_GPIO_Init+0x2f0>)
 80015fa:	685a      	ldr	r2, [r3, #4]
 80015fc:	492d      	ldr	r1, [pc, #180]	; (80016b4 <HAL_GPIO_Init+0x2f0>)
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	4313      	orrs	r3, r2
 8001602:	604b      	str	r3, [r1, #4]
 8001604:	e006      	b.n	8001614 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001606:	4b2b      	ldr	r3, [pc, #172]	; (80016b4 <HAL_GPIO_Init+0x2f0>)
 8001608:	685a      	ldr	r2, [r3, #4]
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	43db      	mvns	r3, r3
 800160e:	4929      	ldr	r1, [pc, #164]	; (80016b4 <HAL_GPIO_Init+0x2f0>)
 8001610:	4013      	ands	r3, r2
 8001612:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d006      	beq.n	800162e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001620:	4b24      	ldr	r3, [pc, #144]	; (80016b4 <HAL_GPIO_Init+0x2f0>)
 8001622:	689a      	ldr	r2, [r3, #8]
 8001624:	4923      	ldr	r1, [pc, #140]	; (80016b4 <HAL_GPIO_Init+0x2f0>)
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	4313      	orrs	r3, r2
 800162a:	608b      	str	r3, [r1, #8]
 800162c:	e006      	b.n	800163c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800162e:	4b21      	ldr	r3, [pc, #132]	; (80016b4 <HAL_GPIO_Init+0x2f0>)
 8001630:	689a      	ldr	r2, [r3, #8]
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	43db      	mvns	r3, r3
 8001636:	491f      	ldr	r1, [pc, #124]	; (80016b4 <HAL_GPIO_Init+0x2f0>)
 8001638:	4013      	ands	r3, r2
 800163a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d006      	beq.n	8001656 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001648:	4b1a      	ldr	r3, [pc, #104]	; (80016b4 <HAL_GPIO_Init+0x2f0>)
 800164a:	68da      	ldr	r2, [r3, #12]
 800164c:	4919      	ldr	r1, [pc, #100]	; (80016b4 <HAL_GPIO_Init+0x2f0>)
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	4313      	orrs	r3, r2
 8001652:	60cb      	str	r3, [r1, #12]
 8001654:	e006      	b.n	8001664 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001656:	4b17      	ldr	r3, [pc, #92]	; (80016b4 <HAL_GPIO_Init+0x2f0>)
 8001658:	68da      	ldr	r2, [r3, #12]
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	43db      	mvns	r3, r3
 800165e:	4915      	ldr	r1, [pc, #84]	; (80016b4 <HAL_GPIO_Init+0x2f0>)
 8001660:	4013      	ands	r3, r2
 8001662:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001666:	3301      	adds	r3, #1
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001670:	fa22 f303 	lsr.w	r3, r2, r3
 8001674:	2b00      	cmp	r3, #0
 8001676:	f47f aeaf 	bne.w	80013d8 <HAL_GPIO_Init+0x14>
  }
}
 800167a:	bf00      	nop
 800167c:	bf00      	nop
 800167e:	372c      	adds	r7, #44	; 0x2c
 8001680:	46bd      	mov	sp, r7
 8001682:	bc80      	pop	{r7}
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	10320000 	.word	0x10320000
 800168c:	10310000 	.word	0x10310000
 8001690:	10220000 	.word	0x10220000
 8001694:	10210000 	.word	0x10210000
 8001698:	10120000 	.word	0x10120000
 800169c:	10110000 	.word	0x10110000
 80016a0:	40021000 	.word	0x40021000
 80016a4:	40010000 	.word	0x40010000
 80016a8:	40010800 	.word	0x40010800
 80016ac:	40010c00 	.word	0x40010c00
 80016b0:	40011000 	.word	0x40011000
 80016b4:	40010400 	.word	0x40010400

080016b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	460b      	mov	r3, r1
 80016c2:	807b      	strh	r3, [r7, #2]
 80016c4:	4613      	mov	r3, r2
 80016c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016c8:	787b      	ldrb	r3, [r7, #1]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ce:	887a      	ldrh	r2, [r7, #2]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016d4:	e003      	b.n	80016de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016d6:	887b      	ldrh	r3, [r7, #2]
 80016d8:	041a      	lsls	r2, r3, #16
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	611a      	str	r2, [r3, #16]
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr

080016e8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	460b      	mov	r3, r1
 80016f2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016fa:	887a      	ldrh	r2, [r7, #2]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	4013      	ands	r3, r2
 8001700:	041a      	lsls	r2, r3, #16
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	43d9      	mvns	r1, r3
 8001706:	887b      	ldrh	r3, [r7, #2]
 8001708:	400b      	ands	r3, r1
 800170a:	431a      	orrs	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	611a      	str	r2, [r3, #16]
}
 8001710:	bf00      	nop
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr
	...

0800171c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e26c      	b.n	8001c08 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	2b00      	cmp	r3, #0
 8001738:	f000 8087 	beq.w	800184a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800173c:	4b92      	ldr	r3, [pc, #584]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f003 030c 	and.w	r3, r3, #12
 8001744:	2b04      	cmp	r3, #4
 8001746:	d00c      	beq.n	8001762 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001748:	4b8f      	ldr	r3, [pc, #572]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f003 030c 	and.w	r3, r3, #12
 8001750:	2b08      	cmp	r3, #8
 8001752:	d112      	bne.n	800177a <HAL_RCC_OscConfig+0x5e>
 8001754:	4b8c      	ldr	r3, [pc, #560]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800175c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001760:	d10b      	bne.n	800177a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001762:	4b89      	ldr	r3, [pc, #548]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d06c      	beq.n	8001848 <HAL_RCC_OscConfig+0x12c>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d168      	bne.n	8001848 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e246      	b.n	8001c08 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001782:	d106      	bne.n	8001792 <HAL_RCC_OscConfig+0x76>
 8001784:	4b80      	ldr	r3, [pc, #512]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a7f      	ldr	r2, [pc, #508]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 800178a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800178e:	6013      	str	r3, [r2, #0]
 8001790:	e02e      	b.n	80017f0 <HAL_RCC_OscConfig+0xd4>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d10c      	bne.n	80017b4 <HAL_RCC_OscConfig+0x98>
 800179a:	4b7b      	ldr	r3, [pc, #492]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a7a      	ldr	r2, [pc, #488]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 80017a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	4b78      	ldr	r3, [pc, #480]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a77      	ldr	r2, [pc, #476]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 80017ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017b0:	6013      	str	r3, [r2, #0]
 80017b2:	e01d      	b.n	80017f0 <HAL_RCC_OscConfig+0xd4>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017bc:	d10c      	bne.n	80017d8 <HAL_RCC_OscConfig+0xbc>
 80017be:	4b72      	ldr	r3, [pc, #456]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a71      	ldr	r2, [pc, #452]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 80017c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017c8:	6013      	str	r3, [r2, #0]
 80017ca:	4b6f      	ldr	r3, [pc, #444]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a6e      	ldr	r2, [pc, #440]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 80017d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d4:	6013      	str	r3, [r2, #0]
 80017d6:	e00b      	b.n	80017f0 <HAL_RCC_OscConfig+0xd4>
 80017d8:	4b6b      	ldr	r3, [pc, #428]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a6a      	ldr	r2, [pc, #424]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 80017de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017e2:	6013      	str	r3, [r2, #0]
 80017e4:	4b68      	ldr	r3, [pc, #416]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a67      	ldr	r2, [pc, #412]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 80017ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d013      	beq.n	8001820 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f8:	f7ff f9a6 	bl	8000b48 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001800:	f7ff f9a2 	bl	8000b48 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b64      	cmp	r3, #100	; 0x64
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e1fa      	b.n	8001c08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001812:	4b5d      	ldr	r3, [pc, #372]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d0f0      	beq.n	8001800 <HAL_RCC_OscConfig+0xe4>
 800181e:	e014      	b.n	800184a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001820:	f7ff f992 	bl	8000b48 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001828:	f7ff f98e 	bl	8000b48 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b64      	cmp	r3, #100	; 0x64
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e1e6      	b.n	8001c08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800183a:	4b53      	ldr	r3, [pc, #332]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1f0      	bne.n	8001828 <HAL_RCC_OscConfig+0x10c>
 8001846:	e000      	b.n	800184a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001848:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d063      	beq.n	800191e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001856:	4b4c      	ldr	r3, [pc, #304]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f003 030c 	and.w	r3, r3, #12
 800185e:	2b00      	cmp	r3, #0
 8001860:	d00b      	beq.n	800187a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001862:	4b49      	ldr	r3, [pc, #292]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f003 030c 	and.w	r3, r3, #12
 800186a:	2b08      	cmp	r3, #8
 800186c:	d11c      	bne.n	80018a8 <HAL_RCC_OscConfig+0x18c>
 800186e:	4b46      	ldr	r3, [pc, #280]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d116      	bne.n	80018a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800187a:	4b43      	ldr	r3, [pc, #268]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d005      	beq.n	8001892 <HAL_RCC_OscConfig+0x176>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d001      	beq.n	8001892 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e1ba      	b.n	8001c08 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001892:	4b3d      	ldr	r3, [pc, #244]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	695b      	ldr	r3, [r3, #20]
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	4939      	ldr	r1, [pc, #228]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018a6:	e03a      	b.n	800191e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d020      	beq.n	80018f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018b0:	4b36      	ldr	r3, [pc, #216]	; (800198c <HAL_RCC_OscConfig+0x270>)
 80018b2:	2201      	movs	r2, #1
 80018b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b6:	f7ff f947 	bl	8000b48 <HAL_GetTick>
 80018ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018bc:	e008      	b.n	80018d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018be:	f7ff f943 	bl	8000b48 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e19b      	b.n	8001c08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d0:	4b2d      	ldr	r3, [pc, #180]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d0f0      	beq.n	80018be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018dc:	4b2a      	ldr	r3, [pc, #168]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	695b      	ldr	r3, [r3, #20]
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	4927      	ldr	r1, [pc, #156]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 80018ec:	4313      	orrs	r3, r2
 80018ee:	600b      	str	r3, [r1, #0]
 80018f0:	e015      	b.n	800191e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018f2:	4b26      	ldr	r3, [pc, #152]	; (800198c <HAL_RCC_OscConfig+0x270>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f8:	f7ff f926 	bl	8000b48 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001900:	f7ff f922 	bl	8000b48 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e17a      	b.n	8001c08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001912:	4b1d      	ldr	r3, [pc, #116]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1f0      	bne.n	8001900 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0308 	and.w	r3, r3, #8
 8001926:	2b00      	cmp	r3, #0
 8001928:	d03a      	beq.n	80019a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d019      	beq.n	8001966 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001932:	4b17      	ldr	r3, [pc, #92]	; (8001990 <HAL_RCC_OscConfig+0x274>)
 8001934:	2201      	movs	r2, #1
 8001936:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001938:	f7ff f906 	bl	8000b48 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001940:	f7ff f902 	bl	8000b48 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e15a      	b.n	8001c08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001952:	4b0d      	ldr	r3, [pc, #52]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 8001954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d0f0      	beq.n	8001940 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800195e:	2001      	movs	r0, #1
 8001960:	f000 fad8 	bl	8001f14 <RCC_Delay>
 8001964:	e01c      	b.n	80019a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001966:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <HAL_RCC_OscConfig+0x274>)
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800196c:	f7ff f8ec 	bl	8000b48 <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001972:	e00f      	b.n	8001994 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001974:	f7ff f8e8 	bl	8000b48 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d908      	bls.n	8001994 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e140      	b.n	8001c08 <HAL_RCC_OscConfig+0x4ec>
 8001986:	bf00      	nop
 8001988:	40021000 	.word	0x40021000
 800198c:	42420000 	.word	0x42420000
 8001990:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001994:	4b9e      	ldr	r3, [pc, #632]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001998:	f003 0302 	and.w	r3, r3, #2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d1e9      	bne.n	8001974 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0304 	and.w	r3, r3, #4
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f000 80a6 	beq.w	8001afa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ae:	2300      	movs	r3, #0
 80019b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019b2:	4b97      	ldr	r3, [pc, #604]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d10d      	bne.n	80019da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019be:	4b94      	ldr	r3, [pc, #592]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 80019c0:	69db      	ldr	r3, [r3, #28]
 80019c2:	4a93      	ldr	r2, [pc, #588]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 80019c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c8:	61d3      	str	r3, [r2, #28]
 80019ca:	4b91      	ldr	r3, [pc, #580]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d2:	60bb      	str	r3, [r7, #8]
 80019d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019d6:	2301      	movs	r3, #1
 80019d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019da:	4b8e      	ldr	r3, [pc, #568]	; (8001c14 <HAL_RCC_OscConfig+0x4f8>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d118      	bne.n	8001a18 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019e6:	4b8b      	ldr	r3, [pc, #556]	; (8001c14 <HAL_RCC_OscConfig+0x4f8>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a8a      	ldr	r2, [pc, #552]	; (8001c14 <HAL_RCC_OscConfig+0x4f8>)
 80019ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019f2:	f7ff f8a9 	bl	8000b48 <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019fa:	f7ff f8a5 	bl	8000b48 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b64      	cmp	r3, #100	; 0x64
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e0fd      	b.n	8001c08 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a0c:	4b81      	ldr	r3, [pc, #516]	; (8001c14 <HAL_RCC_OscConfig+0x4f8>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d0f0      	beq.n	80019fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d106      	bne.n	8001a2e <HAL_RCC_OscConfig+0x312>
 8001a20:	4b7b      	ldr	r3, [pc, #492]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001a22:	6a1b      	ldr	r3, [r3, #32]
 8001a24:	4a7a      	ldr	r2, [pc, #488]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001a26:	f043 0301 	orr.w	r3, r3, #1
 8001a2a:	6213      	str	r3, [r2, #32]
 8001a2c:	e02d      	b.n	8001a8a <HAL_RCC_OscConfig+0x36e>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d10c      	bne.n	8001a50 <HAL_RCC_OscConfig+0x334>
 8001a36:	4b76      	ldr	r3, [pc, #472]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001a38:	6a1b      	ldr	r3, [r3, #32]
 8001a3a:	4a75      	ldr	r2, [pc, #468]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001a3c:	f023 0301 	bic.w	r3, r3, #1
 8001a40:	6213      	str	r3, [r2, #32]
 8001a42:	4b73      	ldr	r3, [pc, #460]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001a44:	6a1b      	ldr	r3, [r3, #32]
 8001a46:	4a72      	ldr	r2, [pc, #456]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001a48:	f023 0304 	bic.w	r3, r3, #4
 8001a4c:	6213      	str	r3, [r2, #32]
 8001a4e:	e01c      	b.n	8001a8a <HAL_RCC_OscConfig+0x36e>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	2b05      	cmp	r3, #5
 8001a56:	d10c      	bne.n	8001a72 <HAL_RCC_OscConfig+0x356>
 8001a58:	4b6d      	ldr	r3, [pc, #436]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001a5a:	6a1b      	ldr	r3, [r3, #32]
 8001a5c:	4a6c      	ldr	r2, [pc, #432]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001a5e:	f043 0304 	orr.w	r3, r3, #4
 8001a62:	6213      	str	r3, [r2, #32]
 8001a64:	4b6a      	ldr	r3, [pc, #424]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001a66:	6a1b      	ldr	r3, [r3, #32]
 8001a68:	4a69      	ldr	r2, [pc, #420]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001a6a:	f043 0301 	orr.w	r3, r3, #1
 8001a6e:	6213      	str	r3, [r2, #32]
 8001a70:	e00b      	b.n	8001a8a <HAL_RCC_OscConfig+0x36e>
 8001a72:	4b67      	ldr	r3, [pc, #412]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001a74:	6a1b      	ldr	r3, [r3, #32]
 8001a76:	4a66      	ldr	r2, [pc, #408]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001a78:	f023 0301 	bic.w	r3, r3, #1
 8001a7c:	6213      	str	r3, [r2, #32]
 8001a7e:	4b64      	ldr	r3, [pc, #400]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001a80:	6a1b      	ldr	r3, [r3, #32]
 8001a82:	4a63      	ldr	r2, [pc, #396]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001a84:	f023 0304 	bic.w	r3, r3, #4
 8001a88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d015      	beq.n	8001abe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a92:	f7ff f859 	bl	8000b48 <HAL_GetTick>
 8001a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a98:	e00a      	b.n	8001ab0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a9a:	f7ff f855 	bl	8000b48 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e0ab      	b.n	8001c08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ab0:	4b57      	ldr	r3, [pc, #348]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001ab2:	6a1b      	ldr	r3, [r3, #32]
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d0ee      	beq.n	8001a9a <HAL_RCC_OscConfig+0x37e>
 8001abc:	e014      	b.n	8001ae8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001abe:	f7ff f843 	bl	8000b48 <HAL_GetTick>
 8001ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ac4:	e00a      	b.n	8001adc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ac6:	f7ff f83f 	bl	8000b48 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e095      	b.n	8001c08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001adc:	4b4c      	ldr	r3, [pc, #304]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1ee      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ae8:	7dfb      	ldrb	r3, [r7, #23]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d105      	bne.n	8001afa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aee:	4b48      	ldr	r3, [pc, #288]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	4a47      	ldr	r2, [pc, #284]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001af4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001af8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f000 8081 	beq.w	8001c06 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b04:	4b42      	ldr	r3, [pc, #264]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 030c 	and.w	r3, r3, #12
 8001b0c:	2b08      	cmp	r3, #8
 8001b0e:	d061      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69db      	ldr	r3, [r3, #28]
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d146      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b18:	4b3f      	ldr	r3, [pc, #252]	; (8001c18 <HAL_RCC_OscConfig+0x4fc>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1e:	f7ff f813 	bl	8000b48 <HAL_GetTick>
 8001b22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b24:	e008      	b.n	8001b38 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b26:	f7ff f80f 	bl	8000b48 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e067      	b.n	8001c08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b38:	4b35      	ldr	r3, [pc, #212]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1f0      	bne.n	8001b26 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a1b      	ldr	r3, [r3, #32]
 8001b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b4c:	d108      	bne.n	8001b60 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b4e:	4b30      	ldr	r3, [pc, #192]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	492d      	ldr	r1, [pc, #180]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b60:	4b2b      	ldr	r3, [pc, #172]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a19      	ldr	r1, [r3, #32]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b70:	430b      	orrs	r3, r1
 8001b72:	4927      	ldr	r1, [pc, #156]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b78:	4b27      	ldr	r3, [pc, #156]	; (8001c18 <HAL_RCC_OscConfig+0x4fc>)
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7e:	f7fe ffe3 	bl	8000b48 <HAL_GetTick>
 8001b82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b84:	e008      	b.n	8001b98 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b86:	f7fe ffdf 	bl	8000b48 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e037      	b.n	8001c08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b98:	4b1d      	ldr	r3, [pc, #116]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d0f0      	beq.n	8001b86 <HAL_RCC_OscConfig+0x46a>
 8001ba4:	e02f      	b.n	8001c06 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba6:	4b1c      	ldr	r3, [pc, #112]	; (8001c18 <HAL_RCC_OscConfig+0x4fc>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bac:	f7fe ffcc 	bl	8000b48 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb4:	f7fe ffc8 	bl	8000b48 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e020      	b.n	8001c08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bc6:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1f0      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x498>
 8001bd2:	e018      	b.n	8001c06 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	69db      	ldr	r3, [r3, #28]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d101      	bne.n	8001be0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e013      	b.n	8001c08 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001be0:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a1b      	ldr	r3, [r3, #32]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d106      	bne.n	8001c02 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d001      	beq.n	8001c06 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e000      	b.n	8001c08 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3718      	adds	r7, #24
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40021000 	.word	0x40021000
 8001c14:	40007000 	.word	0x40007000
 8001c18:	42420060 	.word	0x42420060

08001c1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d101      	bne.n	8001c30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e0d0      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c30:	4b6a      	ldr	r3, [pc, #424]	; (8001ddc <HAL_RCC_ClockConfig+0x1c0>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d910      	bls.n	8001c60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c3e:	4b67      	ldr	r3, [pc, #412]	; (8001ddc <HAL_RCC_ClockConfig+0x1c0>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f023 0207 	bic.w	r2, r3, #7
 8001c46:	4965      	ldr	r1, [pc, #404]	; (8001ddc <HAL_RCC_ClockConfig+0x1c0>)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c4e:	4b63      	ldr	r3, [pc, #396]	; (8001ddc <HAL_RCC_ClockConfig+0x1c0>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d001      	beq.n	8001c60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e0b8      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d020      	beq.n	8001cae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0304 	and.w	r3, r3, #4
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d005      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c78:	4b59      	ldr	r3, [pc, #356]	; (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	4a58      	ldr	r2, [pc, #352]	; (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0308 	and.w	r3, r3, #8
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d005      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c90:	4b53      	ldr	r3, [pc, #332]	; (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	4a52      	ldr	r2, [pc, #328]	; (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c96:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c9c:	4b50      	ldr	r3, [pc, #320]	; (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	494d      	ldr	r1, [pc, #308]	; (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d040      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d107      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc2:	4b47      	ldr	r3, [pc, #284]	; (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d115      	bne.n	8001cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e07f      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d107      	bne.n	8001cea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cda:	4b41      	ldr	r3, [pc, #260]	; (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d109      	bne.n	8001cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e073      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cea:	4b3d      	ldr	r3, [pc, #244]	; (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e06b      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cfa:	4b39      	ldr	r3, [pc, #228]	; (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f023 0203 	bic.w	r2, r3, #3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	4936      	ldr	r1, [pc, #216]	; (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d0c:	f7fe ff1c 	bl	8000b48 <HAL_GetTick>
 8001d10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d12:	e00a      	b.n	8001d2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d14:	f7fe ff18 	bl	8000b48 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e053      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d2a:	4b2d      	ldr	r3, [pc, #180]	; (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f003 020c 	and.w	r2, r3, #12
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d1eb      	bne.n	8001d14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d3c:	4b27      	ldr	r3, [pc, #156]	; (8001ddc <HAL_RCC_ClockConfig+0x1c0>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d210      	bcs.n	8001d6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d4a:	4b24      	ldr	r3, [pc, #144]	; (8001ddc <HAL_RCC_ClockConfig+0x1c0>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f023 0207 	bic.w	r2, r3, #7
 8001d52:	4922      	ldr	r1, [pc, #136]	; (8001ddc <HAL_RCC_ClockConfig+0x1c0>)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d5a:	4b20      	ldr	r3, [pc, #128]	; (8001ddc <HAL_RCC_ClockConfig+0x1c0>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d001      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e032      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d008      	beq.n	8001d8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d78:	4b19      	ldr	r3, [pc, #100]	; (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	4916      	ldr	r1, [pc, #88]	; (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0308 	and.w	r3, r3, #8
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d009      	beq.n	8001daa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d96:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	490e      	ldr	r1, [pc, #56]	; (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001daa:	f000 f821 	bl	8001df0 <HAL_RCC_GetSysClockFreq>
 8001dae:	4602      	mov	r2, r0
 8001db0:	4b0b      	ldr	r3, [pc, #44]	; (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	091b      	lsrs	r3, r3, #4
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	490a      	ldr	r1, [pc, #40]	; (8001de4 <HAL_RCC_ClockConfig+0x1c8>)
 8001dbc:	5ccb      	ldrb	r3, [r1, r3]
 8001dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8001dc2:	4a09      	ldr	r2, [pc, #36]	; (8001de8 <HAL_RCC_ClockConfig+0x1cc>)
 8001dc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001dc6:	4b09      	ldr	r3, [pc, #36]	; (8001dec <HAL_RCC_ClockConfig+0x1d0>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7fe fe7a 	bl	8000ac4 <HAL_InitTick>

  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40022000 	.word	0x40022000
 8001de0:	40021000 	.word	0x40021000
 8001de4:	080035d0 	.word	0x080035d0
 8001de8:	20000004 	.word	0x20000004
 8001dec:	20000008 	.word	0x20000008

08001df0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001df0:	b490      	push	{r4, r7}
 8001df2:	b08a      	sub	sp, #40	; 0x28
 8001df4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001df6:	4b2a      	ldr	r3, [pc, #168]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001df8:	1d3c      	adds	r4, r7, #4
 8001dfa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e00:	f240 2301 	movw	r3, #513	; 0x201
 8001e04:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e06:	2300      	movs	r3, #0
 8001e08:	61fb      	str	r3, [r7, #28]
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61bb      	str	r3, [r7, #24]
 8001e0e:	2300      	movs	r3, #0
 8001e10:	627b      	str	r3, [r7, #36]	; 0x24
 8001e12:	2300      	movs	r3, #0
 8001e14:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e16:	2300      	movs	r3, #0
 8001e18:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e1a:	4b22      	ldr	r3, [pc, #136]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	f003 030c 	and.w	r3, r3, #12
 8001e26:	2b04      	cmp	r3, #4
 8001e28:	d002      	beq.n	8001e30 <HAL_RCC_GetSysClockFreq+0x40>
 8001e2a:	2b08      	cmp	r3, #8
 8001e2c:	d003      	beq.n	8001e36 <HAL_RCC_GetSysClockFreq+0x46>
 8001e2e:	e02d      	b.n	8001e8c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e30:	4b1d      	ldr	r3, [pc, #116]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e32:	623b      	str	r3, [r7, #32]
      break;
 8001e34:	e02d      	b.n	8001e92 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	0c9b      	lsrs	r3, r3, #18
 8001e3a:	f003 030f 	and.w	r3, r3, #15
 8001e3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e42:	4413      	add	r3, r2
 8001e44:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e48:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d013      	beq.n	8001e7c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e54:	4b13      	ldr	r3, [pc, #76]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	0c5b      	lsrs	r3, r3, #17
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e62:	4413      	add	r3, r2
 8001e64:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e68:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	4a0e      	ldr	r2, [pc, #56]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e6e:	fb02 f203 	mul.w	r2, r2, r3
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e78:	627b      	str	r3, [r7, #36]	; 0x24
 8001e7a:	e004      	b.n	8001e86 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	4a0b      	ldr	r2, [pc, #44]	; (8001eac <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e80:	fb02 f303 	mul.w	r3, r2, r3
 8001e84:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	623b      	str	r3, [r7, #32]
      break;
 8001e8a:	e002      	b.n	8001e92 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e8c:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e8e:	623b      	str	r3, [r7, #32]
      break;
 8001e90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e92:	6a3b      	ldr	r3, [r7, #32]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3728      	adds	r7, #40	; 0x28
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bc90      	pop	{r4, r7}
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	080035c0 	.word	0x080035c0
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	007a1200 	.word	0x007a1200
 8001eac:	003d0900 	.word	0x003d0900

08001eb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001eb4:	4b02      	ldr	r3, [pc, #8]	; (8001ec0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr
 8001ec0:	20000004 	.word	0x20000004

08001ec4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ec8:	f7ff fff2 	bl	8001eb0 <HAL_RCC_GetHCLKFreq>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	0a1b      	lsrs	r3, r3, #8
 8001ed4:	f003 0307 	and.w	r3, r3, #7
 8001ed8:	4903      	ldr	r1, [pc, #12]	; (8001ee8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eda:	5ccb      	ldrb	r3, [r1, r3]
 8001edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	080035e0 	.word	0x080035e0

08001eec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ef0:	f7ff ffde 	bl	8001eb0 <HAL_RCC_GetHCLKFreq>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	0adb      	lsrs	r3, r3, #11
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	4903      	ldr	r1, [pc, #12]	; (8001f10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f02:	5ccb      	ldrb	r3, [r1, r3]
 8001f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	080035e0 	.word	0x080035e0

08001f14 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f1c:	4b0a      	ldr	r3, [pc, #40]	; (8001f48 <RCC_Delay+0x34>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a0a      	ldr	r2, [pc, #40]	; (8001f4c <RCC_Delay+0x38>)
 8001f22:	fba2 2303 	umull	r2, r3, r2, r3
 8001f26:	0a5b      	lsrs	r3, r3, #9
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	fb02 f303 	mul.w	r3, r2, r3
 8001f2e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f30:	bf00      	nop
  }
  while (Delay --);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	1e5a      	subs	r2, r3, #1
 8001f36:	60fa      	str	r2, [r7, #12]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1f9      	bne.n	8001f30 <RCC_Delay+0x1c>
}
 8001f3c:	bf00      	nop
 8001f3e:	bf00      	nop
 8001f40:	3714      	adds	r7, #20
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bc80      	pop	{r7}
 8001f46:	4770      	bx	lr
 8001f48:	20000004 	.word	0x20000004
 8001f4c:	10624dd3 	.word	0x10624dd3

08001f50 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	613b      	str	r3, [r7, #16]
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d07d      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f70:	4b4f      	ldr	r3, [pc, #316]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f72:	69db      	ldr	r3, [r3, #28]
 8001f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d10d      	bne.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f7c:	4b4c      	ldr	r3, [pc, #304]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f7e:	69db      	ldr	r3, [r3, #28]
 8001f80:	4a4b      	ldr	r2, [pc, #300]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f86:	61d3      	str	r3, [r2, #28]
 8001f88:	4b49      	ldr	r3, [pc, #292]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f8a:	69db      	ldr	r3, [r3, #28]
 8001f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f90:	60bb      	str	r3, [r7, #8]
 8001f92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f94:	2301      	movs	r3, #1
 8001f96:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f98:	4b46      	ldr	r3, [pc, #280]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d118      	bne.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fa4:	4b43      	ldr	r3, [pc, #268]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a42      	ldr	r2, [pc, #264]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001faa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fb0:	f7fe fdca 	bl	8000b48 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb6:	e008      	b.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fb8:	f7fe fdc6 	bl	8000b48 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b64      	cmp	r3, #100	; 0x64
 8001fc4:	d901      	bls.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e06d      	b.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fca:	4b3a      	ldr	r3, [pc, #232]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0f0      	beq.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001fd6:	4b36      	ldr	r3, [pc, #216]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fde:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d02e      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d027      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ff4:	4b2e      	ldr	r3, [pc, #184]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ffc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ffe:	4b2e      	ldr	r3, [pc, #184]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002000:	2201      	movs	r2, #1
 8002002:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002004:	4b2c      	ldr	r3, [pc, #176]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800200a:	4a29      	ldr	r2, [pc, #164]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b00      	cmp	r3, #0
 8002018:	d014      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201a:	f7fe fd95 	bl	8000b48 <HAL_GetTick>
 800201e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002020:	e00a      	b.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002022:	f7fe fd91 	bl	8000b48 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002030:	4293      	cmp	r3, r2
 8002032:	d901      	bls.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e036      	b.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002038:	4b1d      	ldr	r3, [pc, #116]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0ee      	beq.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002044:	4b1a      	ldr	r3, [pc, #104]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	4917      	ldr	r1, [pc, #92]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002052:	4313      	orrs	r3, r2
 8002054:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002056:	7dfb      	ldrb	r3, [r7, #23]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d105      	bne.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800205c:	4b14      	ldr	r3, [pc, #80]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800205e:	69db      	ldr	r3, [r3, #28]
 8002060:	4a13      	ldr	r2, [pc, #76]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002062:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002066:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d008      	beq.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002074:	4b0e      	ldr	r3, [pc, #56]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	490b      	ldr	r1, [pc, #44]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002082:	4313      	orrs	r3, r2
 8002084:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0310 	and.w	r3, r3, #16
 800208e:	2b00      	cmp	r3, #0
 8002090:	d008      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002092:	4b07      	ldr	r3, [pc, #28]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	4904      	ldr	r1, [pc, #16]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3718      	adds	r7, #24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40021000 	.word	0x40021000
 80020b4:	40007000 	.word	0x40007000
 80020b8:	42420440 	.word	0x42420440

080020bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e041      	b.n	8002152 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d106      	bne.n	80020e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7fe fb8e 	bl	8000804 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2202      	movs	r2, #2
 80020ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3304      	adds	r3, #4
 80020f8:	4619      	mov	r1, r3
 80020fa:	4610      	mov	r0, r2
 80020fc:	f000 fa6a 	bl	80025d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
	...

0800215c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800216a:	b2db      	uxtb	r3, r3
 800216c:	2b01      	cmp	r3, #1
 800216e:	d001      	beq.n	8002174 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e035      	b.n	80021e0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2202      	movs	r2, #2
 8002178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68da      	ldr	r2, [r3, #12]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f042 0201 	orr.w	r2, r2, #1
 800218a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a16      	ldr	r2, [pc, #88]	; (80021ec <HAL_TIM_Base_Start_IT+0x90>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d009      	beq.n	80021aa <HAL_TIM_Base_Start_IT+0x4e>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800219e:	d004      	beq.n	80021aa <HAL_TIM_Base_Start_IT+0x4e>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a12      	ldr	r2, [pc, #72]	; (80021f0 <HAL_TIM_Base_Start_IT+0x94>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d111      	bne.n	80021ce <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 0307 	and.w	r3, r3, #7
 80021b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2b06      	cmp	r3, #6
 80021ba:	d010      	beq.n	80021de <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f042 0201 	orr.w	r2, r2, #1
 80021ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021cc:	e007      	b.n	80021de <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f042 0201 	orr.w	r2, r2, #1
 80021dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	40012c00 	.word	0x40012c00
 80021f0:	40000400 	.word	0x40000400

080021f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b02      	cmp	r3, #2
 8002208:	d122      	bne.n	8002250 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b02      	cmp	r3, #2
 8002216:	d11b      	bne.n	8002250 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f06f 0202 	mvn.w	r2, #2
 8002220:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2201      	movs	r2, #1
 8002226:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 f9b1 	bl	800259e <HAL_TIM_IC_CaptureCallback>
 800223c:	e005      	b.n	800224a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f9a4 	bl	800258c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 f9b3 	bl	80025b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	f003 0304 	and.w	r3, r3, #4
 800225a:	2b04      	cmp	r3, #4
 800225c:	d122      	bne.n	80022a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	2b04      	cmp	r3, #4
 800226a:	d11b      	bne.n	80022a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f06f 0204 	mvn.w	r2, #4
 8002274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2202      	movs	r2, #2
 800227a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f987 	bl	800259e <HAL_TIM_IC_CaptureCallback>
 8002290:	e005      	b.n	800229e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 f97a 	bl	800258c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f000 f989 	bl	80025b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	f003 0308 	and.w	r3, r3, #8
 80022ae:	2b08      	cmp	r3, #8
 80022b0:	d122      	bne.n	80022f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	f003 0308 	and.w	r3, r3, #8
 80022bc:	2b08      	cmp	r3, #8
 80022be:	d11b      	bne.n	80022f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f06f 0208 	mvn.w	r2, #8
 80022c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2204      	movs	r2, #4
 80022ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 f95d 	bl	800259e <HAL_TIM_IC_CaptureCallback>
 80022e4:	e005      	b.n	80022f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f950 	bl	800258c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 f95f 	bl	80025b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	f003 0310 	and.w	r3, r3, #16
 8002302:	2b10      	cmp	r3, #16
 8002304:	d122      	bne.n	800234c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	f003 0310 	and.w	r3, r3, #16
 8002310:	2b10      	cmp	r3, #16
 8002312:	d11b      	bne.n	800234c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f06f 0210 	mvn.w	r2, #16
 800231c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2208      	movs	r2, #8
 8002322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f933 	bl	800259e <HAL_TIM_IC_CaptureCallback>
 8002338:	e005      	b.n	8002346 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 f926 	bl	800258c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 f935 	bl	80025b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b01      	cmp	r3, #1
 8002358:	d10e      	bne.n	8002378 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b01      	cmp	r3, #1
 8002366:	d107      	bne.n	8002378 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f06f 0201 	mvn.w	r2, #1
 8002370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7fd ff9c 	bl	80002b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002382:	2b80      	cmp	r3, #128	; 0x80
 8002384:	d10e      	bne.n	80023a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002390:	2b80      	cmp	r3, #128	; 0x80
 8002392:	d107      	bne.n	80023a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800239c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 fa67 	bl	8002872 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ae:	2b40      	cmp	r3, #64	; 0x40
 80023b0:	d10e      	bne.n	80023d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023bc:	2b40      	cmp	r3, #64	; 0x40
 80023be:	d107      	bne.n	80023d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f8f9 	bl	80025c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	f003 0320 	and.w	r3, r3, #32
 80023da:	2b20      	cmp	r3, #32
 80023dc:	d10e      	bne.n	80023fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	f003 0320 	and.w	r3, r3, #32
 80023e8:	2b20      	cmp	r3, #32
 80023ea:	d107      	bne.n	80023fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f06f 0220 	mvn.w	r2, #32
 80023f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 fa32 	bl	8002860 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023fc:	bf00      	nop
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002414:	2b01      	cmp	r3, #1
 8002416:	d101      	bne.n	800241c <HAL_TIM_ConfigClockSource+0x18>
 8002418:	2302      	movs	r3, #2
 800241a:	e0b3      	b.n	8002584 <HAL_TIM_ConfigClockSource+0x180>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2202      	movs	r2, #2
 8002428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800243a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002442:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002454:	d03e      	beq.n	80024d4 <HAL_TIM_ConfigClockSource+0xd0>
 8002456:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800245a:	f200 8087 	bhi.w	800256c <HAL_TIM_ConfigClockSource+0x168>
 800245e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002462:	f000 8085 	beq.w	8002570 <HAL_TIM_ConfigClockSource+0x16c>
 8002466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800246a:	d87f      	bhi.n	800256c <HAL_TIM_ConfigClockSource+0x168>
 800246c:	2b70      	cmp	r3, #112	; 0x70
 800246e:	d01a      	beq.n	80024a6 <HAL_TIM_ConfigClockSource+0xa2>
 8002470:	2b70      	cmp	r3, #112	; 0x70
 8002472:	d87b      	bhi.n	800256c <HAL_TIM_ConfigClockSource+0x168>
 8002474:	2b60      	cmp	r3, #96	; 0x60
 8002476:	d050      	beq.n	800251a <HAL_TIM_ConfigClockSource+0x116>
 8002478:	2b60      	cmp	r3, #96	; 0x60
 800247a:	d877      	bhi.n	800256c <HAL_TIM_ConfigClockSource+0x168>
 800247c:	2b50      	cmp	r3, #80	; 0x50
 800247e:	d03c      	beq.n	80024fa <HAL_TIM_ConfigClockSource+0xf6>
 8002480:	2b50      	cmp	r3, #80	; 0x50
 8002482:	d873      	bhi.n	800256c <HAL_TIM_ConfigClockSource+0x168>
 8002484:	2b40      	cmp	r3, #64	; 0x40
 8002486:	d058      	beq.n	800253a <HAL_TIM_ConfigClockSource+0x136>
 8002488:	2b40      	cmp	r3, #64	; 0x40
 800248a:	d86f      	bhi.n	800256c <HAL_TIM_ConfigClockSource+0x168>
 800248c:	2b30      	cmp	r3, #48	; 0x30
 800248e:	d064      	beq.n	800255a <HAL_TIM_ConfigClockSource+0x156>
 8002490:	2b30      	cmp	r3, #48	; 0x30
 8002492:	d86b      	bhi.n	800256c <HAL_TIM_ConfigClockSource+0x168>
 8002494:	2b20      	cmp	r3, #32
 8002496:	d060      	beq.n	800255a <HAL_TIM_ConfigClockSource+0x156>
 8002498:	2b20      	cmp	r3, #32
 800249a:	d867      	bhi.n	800256c <HAL_TIM_ConfigClockSource+0x168>
 800249c:	2b00      	cmp	r3, #0
 800249e:	d05c      	beq.n	800255a <HAL_TIM_ConfigClockSource+0x156>
 80024a0:	2b10      	cmp	r3, #16
 80024a2:	d05a      	beq.n	800255a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80024a4:	e062      	b.n	800256c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6818      	ldr	r0, [r3, #0]
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	6899      	ldr	r1, [r3, #8]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	f000 f95c 	bl	8002772 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80024c8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	609a      	str	r2, [r3, #8]
      break;
 80024d2:	e04e      	b.n	8002572 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6818      	ldr	r0, [r3, #0]
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	6899      	ldr	r1, [r3, #8]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	f000 f945 	bl	8002772 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689a      	ldr	r2, [r3, #8]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024f6:	609a      	str	r2, [r3, #8]
      break;
 80024f8:	e03b      	b.n	8002572 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6818      	ldr	r0, [r3, #0]
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	6859      	ldr	r1, [r3, #4]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	461a      	mov	r2, r3
 8002508:	f000 f8bc 	bl	8002684 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2150      	movs	r1, #80	; 0x50
 8002512:	4618      	mov	r0, r3
 8002514:	f000 f913 	bl	800273e <TIM_ITRx_SetConfig>
      break;
 8002518:	e02b      	b.n	8002572 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6818      	ldr	r0, [r3, #0]
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	6859      	ldr	r1, [r3, #4]
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	461a      	mov	r2, r3
 8002528:	f000 f8da 	bl	80026e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2160      	movs	r1, #96	; 0x60
 8002532:	4618      	mov	r0, r3
 8002534:	f000 f903 	bl	800273e <TIM_ITRx_SetConfig>
      break;
 8002538:	e01b      	b.n	8002572 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6818      	ldr	r0, [r3, #0]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	6859      	ldr	r1, [r3, #4]
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	461a      	mov	r2, r3
 8002548:	f000 f89c 	bl	8002684 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2140      	movs	r1, #64	; 0x40
 8002552:	4618      	mov	r0, r3
 8002554:	f000 f8f3 	bl	800273e <TIM_ITRx_SetConfig>
      break;
 8002558:	e00b      	b.n	8002572 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4619      	mov	r1, r3
 8002564:	4610      	mov	r0, r2
 8002566:	f000 f8ea 	bl	800273e <TIM_ITRx_SetConfig>
        break;
 800256a:	e002      	b.n	8002572 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800256c:	bf00      	nop
 800256e:	e000      	b.n	8002572 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002570:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3710      	adds	r7, #16
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	bc80      	pop	{r7}
 800259c:	4770      	bx	lr

0800259e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800259e:	b480      	push	{r7}
 80025a0:	b083      	sub	sp, #12
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025a6:	bf00      	nop
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr

080025b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	bc80      	pop	{r7}
 80025c0:	4770      	bx	lr

080025c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025ca:	bf00      	nop
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr

080025d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a25      	ldr	r2, [pc, #148]	; (800267c <TIM_Base_SetConfig+0xa8>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d007      	beq.n	80025fc <TIM_Base_SetConfig+0x28>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025f2:	d003      	beq.n	80025fc <TIM_Base_SetConfig+0x28>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a22      	ldr	r2, [pc, #136]	; (8002680 <TIM_Base_SetConfig+0xac>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d108      	bne.n	800260e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002602:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	4313      	orrs	r3, r2
 800260c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a1a      	ldr	r2, [pc, #104]	; (800267c <TIM_Base_SetConfig+0xa8>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d007      	beq.n	8002626 <TIM_Base_SetConfig+0x52>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800261c:	d003      	beq.n	8002626 <TIM_Base_SetConfig+0x52>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a17      	ldr	r2, [pc, #92]	; (8002680 <TIM_Base_SetConfig+0xac>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d108      	bne.n	8002638 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800262c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	4313      	orrs	r3, r2
 8002636:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	4313      	orrs	r3, r2
 8002644:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a07      	ldr	r2, [pc, #28]	; (800267c <TIM_Base_SetConfig+0xa8>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d103      	bne.n	800266c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	691a      	ldr	r2, [r3, #16]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	615a      	str	r2, [r3, #20]
}
 8002672:	bf00      	nop
 8002674:	3714      	adds	r7, #20
 8002676:	46bd      	mov	sp, r7
 8002678:	bc80      	pop	{r7}
 800267a:	4770      	bx	lr
 800267c:	40012c00 	.word	0x40012c00
 8002680:	40000400 	.word	0x40000400

08002684 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002684:	b480      	push	{r7}
 8002686:	b087      	sub	sp, #28
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6a1b      	ldr	r3, [r3, #32]
 800269a:	f023 0201 	bic.w	r2, r3, #1
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	011b      	lsls	r3, r3, #4
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	f023 030a 	bic.w	r3, r3, #10
 80026c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	621a      	str	r2, [r3, #32]
}
 80026d6:	bf00      	nop
 80026d8:	371c      	adds	r7, #28
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr

080026e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	f023 0210 	bic.w	r2, r3, #16
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800270a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	031b      	lsls	r3, r3, #12
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	4313      	orrs	r3, r2
 8002714:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800271c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	011b      	lsls	r3, r3, #4
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	4313      	orrs	r3, r2
 8002726:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	621a      	str	r2, [r3, #32]
}
 8002734:	bf00      	nop
 8002736:	371c      	adds	r7, #28
 8002738:	46bd      	mov	sp, r7
 800273a:	bc80      	pop	{r7}
 800273c:	4770      	bx	lr

0800273e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800273e:	b480      	push	{r7}
 8002740:	b085      	sub	sp, #20
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
 8002746:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002754:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	4313      	orrs	r3, r2
 800275c:	f043 0307 	orr.w	r3, r3, #7
 8002760:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	609a      	str	r2, [r3, #8]
}
 8002768:	bf00      	nop
 800276a:	3714      	adds	r7, #20
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr

08002772 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002772:	b480      	push	{r7}
 8002774:	b087      	sub	sp, #28
 8002776:	af00      	add	r7, sp, #0
 8002778:	60f8      	str	r0, [r7, #12]
 800277a:	60b9      	str	r1, [r7, #8]
 800277c:	607a      	str	r2, [r7, #4]
 800277e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800278c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	021a      	lsls	r2, r3, #8
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	431a      	orrs	r2, r3
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	4313      	orrs	r3, r2
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	4313      	orrs	r3, r2
 800279e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	609a      	str	r2, [r3, #8]
}
 80027a6:	bf00      	nop
 80027a8:	371c      	adds	r7, #28
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr

080027b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d101      	bne.n	80027c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027c4:	2302      	movs	r3, #2
 80027c6:	e041      	b.n	800284c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2202      	movs	r2, #2
 80027d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a14      	ldr	r2, [pc, #80]	; (8002858 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d009      	beq.n	8002820 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002814:	d004      	beq.n	8002820 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a10      	ldr	r2, [pc, #64]	; (800285c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d10c      	bne.n	800283a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002826:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	68ba      	ldr	r2, [r7, #8]
 800282e:	4313      	orrs	r3, r2
 8002830:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3714      	adds	r7, #20
 8002850:	46bd      	mov	sp, r7
 8002852:	bc80      	pop	{r7}
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	40012c00 	.word	0x40012c00
 800285c:	40000400 	.word	0x40000400

08002860 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	bc80      	pop	{r7}
 8002870:	4770      	bx	lr

08002872 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr

08002884 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e03f      	b.n	8002916 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d106      	bne.n	80028b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7fd ffce 	bl	800084c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2224      	movs	r2, #36	; 0x24
 80028b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68da      	ldr	r2, [r3, #12]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 f96d 	bl	8002ba8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	691a      	ldr	r2, [r3, #16]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	695a      	ldr	r2, [r3, #20]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68da      	ldr	r2, [r3, #12]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2220      	movs	r2, #32
 8002908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2220      	movs	r2, #32
 8002910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b08a      	sub	sp, #40	; 0x28
 8002922:	af02      	add	r7, sp, #8
 8002924:	60f8      	str	r0, [r7, #12]
 8002926:	60b9      	str	r1, [r7, #8]
 8002928:	603b      	str	r3, [r7, #0]
 800292a:	4613      	mov	r3, r2
 800292c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800292e:	2300      	movs	r3, #0
 8002930:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b20      	cmp	r3, #32
 800293c:	d17c      	bne.n	8002a38 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d002      	beq.n	800294a <HAL_UART_Transmit+0x2c>
 8002944:	88fb      	ldrh	r3, [r7, #6]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e075      	b.n	8002a3a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002954:	2b01      	cmp	r3, #1
 8002956:	d101      	bne.n	800295c <HAL_UART_Transmit+0x3e>
 8002958:	2302      	movs	r3, #2
 800295a:	e06e      	b.n	8002a3a <HAL_UART_Transmit+0x11c>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2221      	movs	r2, #33	; 0x21
 800296e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002972:	f7fe f8e9 	bl	8000b48 <HAL_GetTick>
 8002976:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	88fa      	ldrh	r2, [r7, #6]
 800297c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	88fa      	ldrh	r2, [r7, #6]
 8002982:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800298c:	d108      	bne.n	80029a0 <HAL_UART_Transmit+0x82>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d104      	bne.n	80029a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002996:	2300      	movs	r3, #0
 8002998:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	61bb      	str	r3, [r7, #24]
 800299e:	e003      	b.n	80029a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029a4:	2300      	movs	r3, #0
 80029a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80029b0:	e02a      	b.n	8002a08 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	9300      	str	r3, [sp, #0]
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	2200      	movs	r2, #0
 80029ba:	2180      	movs	r1, #128	; 0x80
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f000 f870 	bl	8002aa2 <UART_WaitOnFlagUntilTimeout>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e036      	b.n	8002a3a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10b      	bne.n	80029ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	881b      	ldrh	r3, [r3, #0]
 80029d6:	461a      	mov	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	3302      	adds	r3, #2
 80029e6:	61bb      	str	r3, [r7, #24]
 80029e8:	e007      	b.n	80029fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	781a      	ldrb	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	3301      	adds	r3, #1
 80029f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	3b01      	subs	r3, #1
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1cf      	bne.n	80029b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	2140      	movs	r1, #64	; 0x40
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f000 f840 	bl	8002aa2 <UART_WaitOnFlagUntilTimeout>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e006      	b.n	8002a3a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002a34:	2300      	movs	r3, #0
 8002a36:	e000      	b.n	8002a3a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002a38:	2302      	movs	r3, #2
  }
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3720      	adds	r7, #32
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b084      	sub	sp, #16
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	60f8      	str	r0, [r7, #12]
 8002a4a:	60b9      	str	r1, [r7, #8]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b20      	cmp	r3, #32
 8002a5a:	d11d      	bne.n	8002a98 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d002      	beq.n	8002a68 <HAL_UART_Receive_IT+0x26>
 8002a62:	88fb      	ldrh	r3, [r7, #6]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e016      	b.n	8002a9a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d101      	bne.n	8002a7a <HAL_UART_Receive_IT+0x38>
 8002a76:	2302      	movs	r3, #2
 8002a78:	e00f      	b.n	8002a9a <HAL_UART_Receive_IT+0x58>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002a88:	88fb      	ldrh	r3, [r7, #6]
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	68b9      	ldr	r1, [r7, #8]
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f000 f851 	bl	8002b36 <UART_Start_Receive_IT>
 8002a94:	4603      	mov	r3, r0
 8002a96:	e000      	b.n	8002a9a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002a98:	2302      	movs	r3, #2
  }
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b084      	sub	sp, #16
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	60f8      	str	r0, [r7, #12]
 8002aaa:	60b9      	str	r1, [r7, #8]
 8002aac:	603b      	str	r3, [r7, #0]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ab2:	e02c      	b.n	8002b0e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aba:	d028      	beq.n	8002b0e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d007      	beq.n	8002ad2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ac2:	f7fe f841 	bl	8000b48 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d21d      	bcs.n	8002b0e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68da      	ldr	r2, [r3, #12]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002ae0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	695a      	ldr	r2, [r3, #20]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 0201 	bic.w	r2, r2, #1
 8002af0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2220      	movs	r2, #32
 8002af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2220      	movs	r2, #32
 8002afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e00f      	b.n	8002b2e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	4013      	ands	r3, r2
 8002b18:	68ba      	ldr	r2, [r7, #8]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	bf0c      	ite	eq
 8002b1e:	2301      	moveq	r3, #1
 8002b20:	2300      	movne	r3, #0
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	461a      	mov	r2, r3
 8002b26:	79fb      	ldrb	r3, [r7, #7]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d0c3      	beq.n	8002ab4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b085      	sub	sp, #20
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	60f8      	str	r0, [r7, #12]
 8002b3e:	60b9      	str	r1, [r7, #8]
 8002b40:	4613      	mov	r3, r2
 8002b42:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	68ba      	ldr	r2, [r7, #8]
 8002b48:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	88fa      	ldrh	r2, [r7, #6]
 8002b4e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	88fa      	ldrh	r2, [r7, #6]
 8002b54:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2222      	movs	r2, #34	; 0x22
 8002b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68da      	ldr	r2, [r3, #12]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b7a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	695a      	ldr	r2, [r3, #20]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f042 0201 	orr.w	r2, r2, #1
 8002b8a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68da      	ldr	r2, [r3, #12]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f042 0220 	orr.w	r2, r2, #32
 8002b9a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3714      	adds	r7, #20
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bc80      	pop	{r7}
 8002ba6:	4770      	bx	lr

08002ba8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	68da      	ldr	r2, [r3, #12]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002be2:	f023 030c 	bic.w	r3, r3, #12
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	6812      	ldr	r2, [r2, #0]
 8002bea:	68b9      	ldr	r1, [r7, #8]
 8002bec:	430b      	orrs	r3, r1
 8002bee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	699a      	ldr	r2, [r3, #24]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	430a      	orrs	r2, r1
 8002c04:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a2c      	ldr	r2, [pc, #176]	; (8002cbc <UART_SetConfig+0x114>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d103      	bne.n	8002c18 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c10:	f7ff f96c 	bl	8001eec <HAL_RCC_GetPCLK2Freq>
 8002c14:	60f8      	str	r0, [r7, #12]
 8002c16:	e002      	b.n	8002c1e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c18:	f7ff f954 	bl	8001ec4 <HAL_RCC_GetPCLK1Freq>
 8002c1c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	4613      	mov	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	009a      	lsls	r2, r3, #2
 8002c28:	441a      	add	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c34:	4a22      	ldr	r2, [pc, #136]	; (8002cc0 <UART_SetConfig+0x118>)
 8002c36:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3a:	095b      	lsrs	r3, r3, #5
 8002c3c:	0119      	lsls	r1, r3, #4
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	4613      	mov	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	4413      	add	r3, r2
 8002c46:	009a      	lsls	r2, r3, #2
 8002c48:	441a      	add	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c54:	4b1a      	ldr	r3, [pc, #104]	; (8002cc0 <UART_SetConfig+0x118>)
 8002c56:	fba3 0302 	umull	r0, r3, r3, r2
 8002c5a:	095b      	lsrs	r3, r3, #5
 8002c5c:	2064      	movs	r0, #100	; 0x64
 8002c5e:	fb00 f303 	mul.w	r3, r0, r3
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	011b      	lsls	r3, r3, #4
 8002c66:	3332      	adds	r3, #50	; 0x32
 8002c68:	4a15      	ldr	r2, [pc, #84]	; (8002cc0 <UART_SetConfig+0x118>)
 8002c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6e:	095b      	lsrs	r3, r3, #5
 8002c70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c74:	4419      	add	r1, r3
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	009a      	lsls	r2, r3, #2
 8002c80:	441a      	add	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c8c:	4b0c      	ldr	r3, [pc, #48]	; (8002cc0 <UART_SetConfig+0x118>)
 8002c8e:	fba3 0302 	umull	r0, r3, r3, r2
 8002c92:	095b      	lsrs	r3, r3, #5
 8002c94:	2064      	movs	r0, #100	; 0x64
 8002c96:	fb00 f303 	mul.w	r3, r0, r3
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	011b      	lsls	r3, r3, #4
 8002c9e:	3332      	adds	r3, #50	; 0x32
 8002ca0:	4a07      	ldr	r2, [pc, #28]	; (8002cc0 <UART_SetConfig+0x118>)
 8002ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca6:	095b      	lsrs	r3, r3, #5
 8002ca8:	f003 020f 	and.w	r2, r3, #15
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	440a      	add	r2, r1
 8002cb2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002cb4:	bf00      	nop
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40013800 	.word	0x40013800
 8002cc0:	51eb851f 	.word	0x51eb851f

08002cc4 <__errno>:
 8002cc4:	4b01      	ldr	r3, [pc, #4]	; (8002ccc <__errno+0x8>)
 8002cc6:	6818      	ldr	r0, [r3, #0]
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	20000010 	.word	0x20000010

08002cd0 <__libc_init_array>:
 8002cd0:	b570      	push	{r4, r5, r6, lr}
 8002cd2:	2600      	movs	r6, #0
 8002cd4:	4d0c      	ldr	r5, [pc, #48]	; (8002d08 <__libc_init_array+0x38>)
 8002cd6:	4c0d      	ldr	r4, [pc, #52]	; (8002d0c <__libc_init_array+0x3c>)
 8002cd8:	1b64      	subs	r4, r4, r5
 8002cda:	10a4      	asrs	r4, r4, #2
 8002cdc:	42a6      	cmp	r6, r4
 8002cde:	d109      	bne.n	8002cf4 <__libc_init_array+0x24>
 8002ce0:	f000 fc5c 	bl	800359c <_init>
 8002ce4:	2600      	movs	r6, #0
 8002ce6:	4d0a      	ldr	r5, [pc, #40]	; (8002d10 <__libc_init_array+0x40>)
 8002ce8:	4c0a      	ldr	r4, [pc, #40]	; (8002d14 <__libc_init_array+0x44>)
 8002cea:	1b64      	subs	r4, r4, r5
 8002cec:	10a4      	asrs	r4, r4, #2
 8002cee:	42a6      	cmp	r6, r4
 8002cf0:	d105      	bne.n	8002cfe <__libc_init_array+0x2e>
 8002cf2:	bd70      	pop	{r4, r5, r6, pc}
 8002cf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cf8:	4798      	blx	r3
 8002cfa:	3601      	adds	r6, #1
 8002cfc:	e7ee      	b.n	8002cdc <__libc_init_array+0xc>
 8002cfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d02:	4798      	blx	r3
 8002d04:	3601      	adds	r6, #1
 8002d06:	e7f2      	b.n	8002cee <__libc_init_array+0x1e>
 8002d08:	0800361c 	.word	0x0800361c
 8002d0c:	0800361c 	.word	0x0800361c
 8002d10:	0800361c 	.word	0x0800361c
 8002d14:	08003620 	.word	0x08003620

08002d18 <memset>:
 8002d18:	4603      	mov	r3, r0
 8002d1a:	4402      	add	r2, r0
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d100      	bne.n	8002d22 <memset+0xa>
 8002d20:	4770      	bx	lr
 8002d22:	f803 1b01 	strb.w	r1, [r3], #1
 8002d26:	e7f9      	b.n	8002d1c <memset+0x4>

08002d28 <siprintf>:
 8002d28:	b40e      	push	{r1, r2, r3}
 8002d2a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002d2e:	b500      	push	{lr}
 8002d30:	b09c      	sub	sp, #112	; 0x70
 8002d32:	ab1d      	add	r3, sp, #116	; 0x74
 8002d34:	9002      	str	r0, [sp, #8]
 8002d36:	9006      	str	r0, [sp, #24]
 8002d38:	9107      	str	r1, [sp, #28]
 8002d3a:	9104      	str	r1, [sp, #16]
 8002d3c:	4808      	ldr	r0, [pc, #32]	; (8002d60 <siprintf+0x38>)
 8002d3e:	4909      	ldr	r1, [pc, #36]	; (8002d64 <siprintf+0x3c>)
 8002d40:	f853 2b04 	ldr.w	r2, [r3], #4
 8002d44:	9105      	str	r1, [sp, #20]
 8002d46:	6800      	ldr	r0, [r0, #0]
 8002d48:	a902      	add	r1, sp, #8
 8002d4a:	9301      	str	r3, [sp, #4]
 8002d4c:	f000 f868 	bl	8002e20 <_svfiprintf_r>
 8002d50:	2200      	movs	r2, #0
 8002d52:	9b02      	ldr	r3, [sp, #8]
 8002d54:	701a      	strb	r2, [r3, #0]
 8002d56:	b01c      	add	sp, #112	; 0x70
 8002d58:	f85d eb04 	ldr.w	lr, [sp], #4
 8002d5c:	b003      	add	sp, #12
 8002d5e:	4770      	bx	lr
 8002d60:	20000010 	.word	0x20000010
 8002d64:	ffff0208 	.word	0xffff0208

08002d68 <__ssputs_r>:
 8002d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d6c:	688e      	ldr	r6, [r1, #8]
 8002d6e:	4682      	mov	sl, r0
 8002d70:	429e      	cmp	r6, r3
 8002d72:	460c      	mov	r4, r1
 8002d74:	4690      	mov	r8, r2
 8002d76:	461f      	mov	r7, r3
 8002d78:	d838      	bhi.n	8002dec <__ssputs_r+0x84>
 8002d7a:	898a      	ldrh	r2, [r1, #12]
 8002d7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002d80:	d032      	beq.n	8002de8 <__ssputs_r+0x80>
 8002d82:	6825      	ldr	r5, [r4, #0]
 8002d84:	6909      	ldr	r1, [r1, #16]
 8002d86:	3301      	adds	r3, #1
 8002d88:	eba5 0901 	sub.w	r9, r5, r1
 8002d8c:	6965      	ldr	r5, [r4, #20]
 8002d8e:	444b      	add	r3, r9
 8002d90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002d94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002d98:	106d      	asrs	r5, r5, #1
 8002d9a:	429d      	cmp	r5, r3
 8002d9c:	bf38      	it	cc
 8002d9e:	461d      	movcc	r5, r3
 8002da0:	0553      	lsls	r3, r2, #21
 8002da2:	d531      	bpl.n	8002e08 <__ssputs_r+0xa0>
 8002da4:	4629      	mov	r1, r5
 8002da6:	f000 fb53 	bl	8003450 <_malloc_r>
 8002daa:	4606      	mov	r6, r0
 8002dac:	b950      	cbnz	r0, 8002dc4 <__ssputs_r+0x5c>
 8002dae:	230c      	movs	r3, #12
 8002db0:	f04f 30ff 	mov.w	r0, #4294967295
 8002db4:	f8ca 3000 	str.w	r3, [sl]
 8002db8:	89a3      	ldrh	r3, [r4, #12]
 8002dba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dbe:	81a3      	strh	r3, [r4, #12]
 8002dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002dc4:	464a      	mov	r2, r9
 8002dc6:	6921      	ldr	r1, [r4, #16]
 8002dc8:	f000 face 	bl	8003368 <memcpy>
 8002dcc:	89a3      	ldrh	r3, [r4, #12]
 8002dce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002dd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dd6:	81a3      	strh	r3, [r4, #12]
 8002dd8:	6126      	str	r6, [r4, #16]
 8002dda:	444e      	add	r6, r9
 8002ddc:	6026      	str	r6, [r4, #0]
 8002dde:	463e      	mov	r6, r7
 8002de0:	6165      	str	r5, [r4, #20]
 8002de2:	eba5 0509 	sub.w	r5, r5, r9
 8002de6:	60a5      	str	r5, [r4, #8]
 8002de8:	42be      	cmp	r6, r7
 8002dea:	d900      	bls.n	8002dee <__ssputs_r+0x86>
 8002dec:	463e      	mov	r6, r7
 8002dee:	4632      	mov	r2, r6
 8002df0:	4641      	mov	r1, r8
 8002df2:	6820      	ldr	r0, [r4, #0]
 8002df4:	f000 fac6 	bl	8003384 <memmove>
 8002df8:	68a3      	ldr	r3, [r4, #8]
 8002dfa:	6822      	ldr	r2, [r4, #0]
 8002dfc:	1b9b      	subs	r3, r3, r6
 8002dfe:	4432      	add	r2, r6
 8002e00:	2000      	movs	r0, #0
 8002e02:	60a3      	str	r3, [r4, #8]
 8002e04:	6022      	str	r2, [r4, #0]
 8002e06:	e7db      	b.n	8002dc0 <__ssputs_r+0x58>
 8002e08:	462a      	mov	r2, r5
 8002e0a:	f000 fb7b 	bl	8003504 <_realloc_r>
 8002e0e:	4606      	mov	r6, r0
 8002e10:	2800      	cmp	r0, #0
 8002e12:	d1e1      	bne.n	8002dd8 <__ssputs_r+0x70>
 8002e14:	4650      	mov	r0, sl
 8002e16:	6921      	ldr	r1, [r4, #16]
 8002e18:	f000 face 	bl	80033b8 <_free_r>
 8002e1c:	e7c7      	b.n	8002dae <__ssputs_r+0x46>
	...

08002e20 <_svfiprintf_r>:
 8002e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e24:	4698      	mov	r8, r3
 8002e26:	898b      	ldrh	r3, [r1, #12]
 8002e28:	4607      	mov	r7, r0
 8002e2a:	061b      	lsls	r3, r3, #24
 8002e2c:	460d      	mov	r5, r1
 8002e2e:	4614      	mov	r4, r2
 8002e30:	b09d      	sub	sp, #116	; 0x74
 8002e32:	d50e      	bpl.n	8002e52 <_svfiprintf_r+0x32>
 8002e34:	690b      	ldr	r3, [r1, #16]
 8002e36:	b963      	cbnz	r3, 8002e52 <_svfiprintf_r+0x32>
 8002e38:	2140      	movs	r1, #64	; 0x40
 8002e3a:	f000 fb09 	bl	8003450 <_malloc_r>
 8002e3e:	6028      	str	r0, [r5, #0]
 8002e40:	6128      	str	r0, [r5, #16]
 8002e42:	b920      	cbnz	r0, 8002e4e <_svfiprintf_r+0x2e>
 8002e44:	230c      	movs	r3, #12
 8002e46:	603b      	str	r3, [r7, #0]
 8002e48:	f04f 30ff 	mov.w	r0, #4294967295
 8002e4c:	e0d1      	b.n	8002ff2 <_svfiprintf_r+0x1d2>
 8002e4e:	2340      	movs	r3, #64	; 0x40
 8002e50:	616b      	str	r3, [r5, #20]
 8002e52:	2300      	movs	r3, #0
 8002e54:	9309      	str	r3, [sp, #36]	; 0x24
 8002e56:	2320      	movs	r3, #32
 8002e58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002e5c:	2330      	movs	r3, #48	; 0x30
 8002e5e:	f04f 0901 	mov.w	r9, #1
 8002e62:	f8cd 800c 	str.w	r8, [sp, #12]
 8002e66:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800300c <_svfiprintf_r+0x1ec>
 8002e6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002e6e:	4623      	mov	r3, r4
 8002e70:	469a      	mov	sl, r3
 8002e72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002e76:	b10a      	cbz	r2, 8002e7c <_svfiprintf_r+0x5c>
 8002e78:	2a25      	cmp	r2, #37	; 0x25
 8002e7a:	d1f9      	bne.n	8002e70 <_svfiprintf_r+0x50>
 8002e7c:	ebba 0b04 	subs.w	fp, sl, r4
 8002e80:	d00b      	beq.n	8002e9a <_svfiprintf_r+0x7a>
 8002e82:	465b      	mov	r3, fp
 8002e84:	4622      	mov	r2, r4
 8002e86:	4629      	mov	r1, r5
 8002e88:	4638      	mov	r0, r7
 8002e8a:	f7ff ff6d 	bl	8002d68 <__ssputs_r>
 8002e8e:	3001      	adds	r0, #1
 8002e90:	f000 80aa 	beq.w	8002fe8 <_svfiprintf_r+0x1c8>
 8002e94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e96:	445a      	add	r2, fp
 8002e98:	9209      	str	r2, [sp, #36]	; 0x24
 8002e9a:	f89a 3000 	ldrb.w	r3, [sl]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f000 80a2 	beq.w	8002fe8 <_svfiprintf_r+0x1c8>
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8002eaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002eae:	f10a 0a01 	add.w	sl, sl, #1
 8002eb2:	9304      	str	r3, [sp, #16]
 8002eb4:	9307      	str	r3, [sp, #28]
 8002eb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002eba:	931a      	str	r3, [sp, #104]	; 0x68
 8002ebc:	4654      	mov	r4, sl
 8002ebe:	2205      	movs	r2, #5
 8002ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ec4:	4851      	ldr	r0, [pc, #324]	; (800300c <_svfiprintf_r+0x1ec>)
 8002ec6:	f000 fa41 	bl	800334c <memchr>
 8002eca:	9a04      	ldr	r2, [sp, #16]
 8002ecc:	b9d8      	cbnz	r0, 8002f06 <_svfiprintf_r+0xe6>
 8002ece:	06d0      	lsls	r0, r2, #27
 8002ed0:	bf44      	itt	mi
 8002ed2:	2320      	movmi	r3, #32
 8002ed4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ed8:	0711      	lsls	r1, r2, #28
 8002eda:	bf44      	itt	mi
 8002edc:	232b      	movmi	r3, #43	; 0x2b
 8002ede:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ee2:	f89a 3000 	ldrb.w	r3, [sl]
 8002ee6:	2b2a      	cmp	r3, #42	; 0x2a
 8002ee8:	d015      	beq.n	8002f16 <_svfiprintf_r+0xf6>
 8002eea:	4654      	mov	r4, sl
 8002eec:	2000      	movs	r0, #0
 8002eee:	f04f 0c0a 	mov.w	ip, #10
 8002ef2:	9a07      	ldr	r2, [sp, #28]
 8002ef4:	4621      	mov	r1, r4
 8002ef6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002efa:	3b30      	subs	r3, #48	; 0x30
 8002efc:	2b09      	cmp	r3, #9
 8002efe:	d94e      	bls.n	8002f9e <_svfiprintf_r+0x17e>
 8002f00:	b1b0      	cbz	r0, 8002f30 <_svfiprintf_r+0x110>
 8002f02:	9207      	str	r2, [sp, #28]
 8002f04:	e014      	b.n	8002f30 <_svfiprintf_r+0x110>
 8002f06:	eba0 0308 	sub.w	r3, r0, r8
 8002f0a:	fa09 f303 	lsl.w	r3, r9, r3
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	46a2      	mov	sl, r4
 8002f12:	9304      	str	r3, [sp, #16]
 8002f14:	e7d2      	b.n	8002ebc <_svfiprintf_r+0x9c>
 8002f16:	9b03      	ldr	r3, [sp, #12]
 8002f18:	1d19      	adds	r1, r3, #4
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	9103      	str	r1, [sp, #12]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	bfbb      	ittet	lt
 8002f22:	425b      	neglt	r3, r3
 8002f24:	f042 0202 	orrlt.w	r2, r2, #2
 8002f28:	9307      	strge	r3, [sp, #28]
 8002f2a:	9307      	strlt	r3, [sp, #28]
 8002f2c:	bfb8      	it	lt
 8002f2e:	9204      	strlt	r2, [sp, #16]
 8002f30:	7823      	ldrb	r3, [r4, #0]
 8002f32:	2b2e      	cmp	r3, #46	; 0x2e
 8002f34:	d10c      	bne.n	8002f50 <_svfiprintf_r+0x130>
 8002f36:	7863      	ldrb	r3, [r4, #1]
 8002f38:	2b2a      	cmp	r3, #42	; 0x2a
 8002f3a:	d135      	bne.n	8002fa8 <_svfiprintf_r+0x188>
 8002f3c:	9b03      	ldr	r3, [sp, #12]
 8002f3e:	3402      	adds	r4, #2
 8002f40:	1d1a      	adds	r2, r3, #4
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	9203      	str	r2, [sp, #12]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	bfb8      	it	lt
 8002f4a:	f04f 33ff 	movlt.w	r3, #4294967295
 8002f4e:	9305      	str	r3, [sp, #20]
 8002f50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800301c <_svfiprintf_r+0x1fc>
 8002f54:	2203      	movs	r2, #3
 8002f56:	4650      	mov	r0, sl
 8002f58:	7821      	ldrb	r1, [r4, #0]
 8002f5a:	f000 f9f7 	bl	800334c <memchr>
 8002f5e:	b140      	cbz	r0, 8002f72 <_svfiprintf_r+0x152>
 8002f60:	2340      	movs	r3, #64	; 0x40
 8002f62:	eba0 000a 	sub.w	r0, r0, sl
 8002f66:	fa03 f000 	lsl.w	r0, r3, r0
 8002f6a:	9b04      	ldr	r3, [sp, #16]
 8002f6c:	3401      	adds	r4, #1
 8002f6e:	4303      	orrs	r3, r0
 8002f70:	9304      	str	r3, [sp, #16]
 8002f72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f76:	2206      	movs	r2, #6
 8002f78:	4825      	ldr	r0, [pc, #148]	; (8003010 <_svfiprintf_r+0x1f0>)
 8002f7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002f7e:	f000 f9e5 	bl	800334c <memchr>
 8002f82:	2800      	cmp	r0, #0
 8002f84:	d038      	beq.n	8002ff8 <_svfiprintf_r+0x1d8>
 8002f86:	4b23      	ldr	r3, [pc, #140]	; (8003014 <_svfiprintf_r+0x1f4>)
 8002f88:	bb1b      	cbnz	r3, 8002fd2 <_svfiprintf_r+0x1b2>
 8002f8a:	9b03      	ldr	r3, [sp, #12]
 8002f8c:	3307      	adds	r3, #7
 8002f8e:	f023 0307 	bic.w	r3, r3, #7
 8002f92:	3308      	adds	r3, #8
 8002f94:	9303      	str	r3, [sp, #12]
 8002f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f98:	4433      	add	r3, r6
 8002f9a:	9309      	str	r3, [sp, #36]	; 0x24
 8002f9c:	e767      	b.n	8002e6e <_svfiprintf_r+0x4e>
 8002f9e:	460c      	mov	r4, r1
 8002fa0:	2001      	movs	r0, #1
 8002fa2:	fb0c 3202 	mla	r2, ip, r2, r3
 8002fa6:	e7a5      	b.n	8002ef4 <_svfiprintf_r+0xd4>
 8002fa8:	2300      	movs	r3, #0
 8002faa:	f04f 0c0a 	mov.w	ip, #10
 8002fae:	4619      	mov	r1, r3
 8002fb0:	3401      	adds	r4, #1
 8002fb2:	9305      	str	r3, [sp, #20]
 8002fb4:	4620      	mov	r0, r4
 8002fb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002fba:	3a30      	subs	r2, #48	; 0x30
 8002fbc:	2a09      	cmp	r2, #9
 8002fbe:	d903      	bls.n	8002fc8 <_svfiprintf_r+0x1a8>
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0c5      	beq.n	8002f50 <_svfiprintf_r+0x130>
 8002fc4:	9105      	str	r1, [sp, #20]
 8002fc6:	e7c3      	b.n	8002f50 <_svfiprintf_r+0x130>
 8002fc8:	4604      	mov	r4, r0
 8002fca:	2301      	movs	r3, #1
 8002fcc:	fb0c 2101 	mla	r1, ip, r1, r2
 8002fd0:	e7f0      	b.n	8002fb4 <_svfiprintf_r+0x194>
 8002fd2:	ab03      	add	r3, sp, #12
 8002fd4:	9300      	str	r3, [sp, #0]
 8002fd6:	462a      	mov	r2, r5
 8002fd8:	4638      	mov	r0, r7
 8002fda:	4b0f      	ldr	r3, [pc, #60]	; (8003018 <_svfiprintf_r+0x1f8>)
 8002fdc:	a904      	add	r1, sp, #16
 8002fde:	f3af 8000 	nop.w
 8002fe2:	1c42      	adds	r2, r0, #1
 8002fe4:	4606      	mov	r6, r0
 8002fe6:	d1d6      	bne.n	8002f96 <_svfiprintf_r+0x176>
 8002fe8:	89ab      	ldrh	r3, [r5, #12]
 8002fea:	065b      	lsls	r3, r3, #25
 8002fec:	f53f af2c 	bmi.w	8002e48 <_svfiprintf_r+0x28>
 8002ff0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002ff2:	b01d      	add	sp, #116	; 0x74
 8002ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ff8:	ab03      	add	r3, sp, #12
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	462a      	mov	r2, r5
 8002ffe:	4638      	mov	r0, r7
 8003000:	4b05      	ldr	r3, [pc, #20]	; (8003018 <_svfiprintf_r+0x1f8>)
 8003002:	a904      	add	r1, sp, #16
 8003004:	f000 f87c 	bl	8003100 <_printf_i>
 8003008:	e7eb      	b.n	8002fe2 <_svfiprintf_r+0x1c2>
 800300a:	bf00      	nop
 800300c:	080035e8 	.word	0x080035e8
 8003010:	080035f2 	.word	0x080035f2
 8003014:	00000000 	.word	0x00000000
 8003018:	08002d69 	.word	0x08002d69
 800301c:	080035ee 	.word	0x080035ee

08003020 <_printf_common>:
 8003020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003024:	4616      	mov	r6, r2
 8003026:	4699      	mov	r9, r3
 8003028:	688a      	ldr	r2, [r1, #8]
 800302a:	690b      	ldr	r3, [r1, #16]
 800302c:	4607      	mov	r7, r0
 800302e:	4293      	cmp	r3, r2
 8003030:	bfb8      	it	lt
 8003032:	4613      	movlt	r3, r2
 8003034:	6033      	str	r3, [r6, #0]
 8003036:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800303a:	460c      	mov	r4, r1
 800303c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003040:	b10a      	cbz	r2, 8003046 <_printf_common+0x26>
 8003042:	3301      	adds	r3, #1
 8003044:	6033      	str	r3, [r6, #0]
 8003046:	6823      	ldr	r3, [r4, #0]
 8003048:	0699      	lsls	r1, r3, #26
 800304a:	bf42      	ittt	mi
 800304c:	6833      	ldrmi	r3, [r6, #0]
 800304e:	3302      	addmi	r3, #2
 8003050:	6033      	strmi	r3, [r6, #0]
 8003052:	6825      	ldr	r5, [r4, #0]
 8003054:	f015 0506 	ands.w	r5, r5, #6
 8003058:	d106      	bne.n	8003068 <_printf_common+0x48>
 800305a:	f104 0a19 	add.w	sl, r4, #25
 800305e:	68e3      	ldr	r3, [r4, #12]
 8003060:	6832      	ldr	r2, [r6, #0]
 8003062:	1a9b      	subs	r3, r3, r2
 8003064:	42ab      	cmp	r3, r5
 8003066:	dc28      	bgt.n	80030ba <_printf_common+0x9a>
 8003068:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800306c:	1e13      	subs	r3, r2, #0
 800306e:	6822      	ldr	r2, [r4, #0]
 8003070:	bf18      	it	ne
 8003072:	2301      	movne	r3, #1
 8003074:	0692      	lsls	r2, r2, #26
 8003076:	d42d      	bmi.n	80030d4 <_printf_common+0xb4>
 8003078:	4649      	mov	r1, r9
 800307a:	4638      	mov	r0, r7
 800307c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003080:	47c0      	blx	r8
 8003082:	3001      	adds	r0, #1
 8003084:	d020      	beq.n	80030c8 <_printf_common+0xa8>
 8003086:	6823      	ldr	r3, [r4, #0]
 8003088:	68e5      	ldr	r5, [r4, #12]
 800308a:	f003 0306 	and.w	r3, r3, #6
 800308e:	2b04      	cmp	r3, #4
 8003090:	bf18      	it	ne
 8003092:	2500      	movne	r5, #0
 8003094:	6832      	ldr	r2, [r6, #0]
 8003096:	f04f 0600 	mov.w	r6, #0
 800309a:	68a3      	ldr	r3, [r4, #8]
 800309c:	bf08      	it	eq
 800309e:	1aad      	subeq	r5, r5, r2
 80030a0:	6922      	ldr	r2, [r4, #16]
 80030a2:	bf08      	it	eq
 80030a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80030a8:	4293      	cmp	r3, r2
 80030aa:	bfc4      	itt	gt
 80030ac:	1a9b      	subgt	r3, r3, r2
 80030ae:	18ed      	addgt	r5, r5, r3
 80030b0:	341a      	adds	r4, #26
 80030b2:	42b5      	cmp	r5, r6
 80030b4:	d11a      	bne.n	80030ec <_printf_common+0xcc>
 80030b6:	2000      	movs	r0, #0
 80030b8:	e008      	b.n	80030cc <_printf_common+0xac>
 80030ba:	2301      	movs	r3, #1
 80030bc:	4652      	mov	r2, sl
 80030be:	4649      	mov	r1, r9
 80030c0:	4638      	mov	r0, r7
 80030c2:	47c0      	blx	r8
 80030c4:	3001      	adds	r0, #1
 80030c6:	d103      	bne.n	80030d0 <_printf_common+0xb0>
 80030c8:	f04f 30ff 	mov.w	r0, #4294967295
 80030cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030d0:	3501      	adds	r5, #1
 80030d2:	e7c4      	b.n	800305e <_printf_common+0x3e>
 80030d4:	2030      	movs	r0, #48	; 0x30
 80030d6:	18e1      	adds	r1, r4, r3
 80030d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80030dc:	1c5a      	adds	r2, r3, #1
 80030de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80030e2:	4422      	add	r2, r4
 80030e4:	3302      	adds	r3, #2
 80030e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80030ea:	e7c5      	b.n	8003078 <_printf_common+0x58>
 80030ec:	2301      	movs	r3, #1
 80030ee:	4622      	mov	r2, r4
 80030f0:	4649      	mov	r1, r9
 80030f2:	4638      	mov	r0, r7
 80030f4:	47c0      	blx	r8
 80030f6:	3001      	adds	r0, #1
 80030f8:	d0e6      	beq.n	80030c8 <_printf_common+0xa8>
 80030fa:	3601      	adds	r6, #1
 80030fc:	e7d9      	b.n	80030b2 <_printf_common+0x92>
	...

08003100 <_printf_i>:
 8003100:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003104:	460c      	mov	r4, r1
 8003106:	7e27      	ldrb	r7, [r4, #24]
 8003108:	4691      	mov	r9, r2
 800310a:	2f78      	cmp	r7, #120	; 0x78
 800310c:	4680      	mov	r8, r0
 800310e:	469a      	mov	sl, r3
 8003110:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003112:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003116:	d807      	bhi.n	8003128 <_printf_i+0x28>
 8003118:	2f62      	cmp	r7, #98	; 0x62
 800311a:	d80a      	bhi.n	8003132 <_printf_i+0x32>
 800311c:	2f00      	cmp	r7, #0
 800311e:	f000 80d9 	beq.w	80032d4 <_printf_i+0x1d4>
 8003122:	2f58      	cmp	r7, #88	; 0x58
 8003124:	f000 80a4 	beq.w	8003270 <_printf_i+0x170>
 8003128:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800312c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003130:	e03a      	b.n	80031a8 <_printf_i+0xa8>
 8003132:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003136:	2b15      	cmp	r3, #21
 8003138:	d8f6      	bhi.n	8003128 <_printf_i+0x28>
 800313a:	a001      	add	r0, pc, #4	; (adr r0, 8003140 <_printf_i+0x40>)
 800313c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003140:	08003199 	.word	0x08003199
 8003144:	080031ad 	.word	0x080031ad
 8003148:	08003129 	.word	0x08003129
 800314c:	08003129 	.word	0x08003129
 8003150:	08003129 	.word	0x08003129
 8003154:	08003129 	.word	0x08003129
 8003158:	080031ad 	.word	0x080031ad
 800315c:	08003129 	.word	0x08003129
 8003160:	08003129 	.word	0x08003129
 8003164:	08003129 	.word	0x08003129
 8003168:	08003129 	.word	0x08003129
 800316c:	080032bb 	.word	0x080032bb
 8003170:	080031dd 	.word	0x080031dd
 8003174:	0800329d 	.word	0x0800329d
 8003178:	08003129 	.word	0x08003129
 800317c:	08003129 	.word	0x08003129
 8003180:	080032dd 	.word	0x080032dd
 8003184:	08003129 	.word	0x08003129
 8003188:	080031dd 	.word	0x080031dd
 800318c:	08003129 	.word	0x08003129
 8003190:	08003129 	.word	0x08003129
 8003194:	080032a5 	.word	0x080032a5
 8003198:	680b      	ldr	r3, [r1, #0]
 800319a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800319e:	1d1a      	adds	r2, r3, #4
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	600a      	str	r2, [r1, #0]
 80031a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80031a8:	2301      	movs	r3, #1
 80031aa:	e0a4      	b.n	80032f6 <_printf_i+0x1f6>
 80031ac:	6825      	ldr	r5, [r4, #0]
 80031ae:	6808      	ldr	r0, [r1, #0]
 80031b0:	062e      	lsls	r6, r5, #24
 80031b2:	f100 0304 	add.w	r3, r0, #4
 80031b6:	d50a      	bpl.n	80031ce <_printf_i+0xce>
 80031b8:	6805      	ldr	r5, [r0, #0]
 80031ba:	600b      	str	r3, [r1, #0]
 80031bc:	2d00      	cmp	r5, #0
 80031be:	da03      	bge.n	80031c8 <_printf_i+0xc8>
 80031c0:	232d      	movs	r3, #45	; 0x2d
 80031c2:	426d      	negs	r5, r5
 80031c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031c8:	230a      	movs	r3, #10
 80031ca:	485e      	ldr	r0, [pc, #376]	; (8003344 <_printf_i+0x244>)
 80031cc:	e019      	b.n	8003202 <_printf_i+0x102>
 80031ce:	f015 0f40 	tst.w	r5, #64	; 0x40
 80031d2:	6805      	ldr	r5, [r0, #0]
 80031d4:	600b      	str	r3, [r1, #0]
 80031d6:	bf18      	it	ne
 80031d8:	b22d      	sxthne	r5, r5
 80031da:	e7ef      	b.n	80031bc <_printf_i+0xbc>
 80031dc:	680b      	ldr	r3, [r1, #0]
 80031de:	6825      	ldr	r5, [r4, #0]
 80031e0:	1d18      	adds	r0, r3, #4
 80031e2:	6008      	str	r0, [r1, #0]
 80031e4:	0628      	lsls	r0, r5, #24
 80031e6:	d501      	bpl.n	80031ec <_printf_i+0xec>
 80031e8:	681d      	ldr	r5, [r3, #0]
 80031ea:	e002      	b.n	80031f2 <_printf_i+0xf2>
 80031ec:	0669      	lsls	r1, r5, #25
 80031ee:	d5fb      	bpl.n	80031e8 <_printf_i+0xe8>
 80031f0:	881d      	ldrh	r5, [r3, #0]
 80031f2:	2f6f      	cmp	r7, #111	; 0x6f
 80031f4:	bf0c      	ite	eq
 80031f6:	2308      	moveq	r3, #8
 80031f8:	230a      	movne	r3, #10
 80031fa:	4852      	ldr	r0, [pc, #328]	; (8003344 <_printf_i+0x244>)
 80031fc:	2100      	movs	r1, #0
 80031fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003202:	6866      	ldr	r6, [r4, #4]
 8003204:	2e00      	cmp	r6, #0
 8003206:	bfa8      	it	ge
 8003208:	6821      	ldrge	r1, [r4, #0]
 800320a:	60a6      	str	r6, [r4, #8]
 800320c:	bfa4      	itt	ge
 800320e:	f021 0104 	bicge.w	r1, r1, #4
 8003212:	6021      	strge	r1, [r4, #0]
 8003214:	b90d      	cbnz	r5, 800321a <_printf_i+0x11a>
 8003216:	2e00      	cmp	r6, #0
 8003218:	d04d      	beq.n	80032b6 <_printf_i+0x1b6>
 800321a:	4616      	mov	r6, r2
 800321c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003220:	fb03 5711 	mls	r7, r3, r1, r5
 8003224:	5dc7      	ldrb	r7, [r0, r7]
 8003226:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800322a:	462f      	mov	r7, r5
 800322c:	42bb      	cmp	r3, r7
 800322e:	460d      	mov	r5, r1
 8003230:	d9f4      	bls.n	800321c <_printf_i+0x11c>
 8003232:	2b08      	cmp	r3, #8
 8003234:	d10b      	bne.n	800324e <_printf_i+0x14e>
 8003236:	6823      	ldr	r3, [r4, #0]
 8003238:	07df      	lsls	r7, r3, #31
 800323a:	d508      	bpl.n	800324e <_printf_i+0x14e>
 800323c:	6923      	ldr	r3, [r4, #16]
 800323e:	6861      	ldr	r1, [r4, #4]
 8003240:	4299      	cmp	r1, r3
 8003242:	bfde      	ittt	le
 8003244:	2330      	movle	r3, #48	; 0x30
 8003246:	f806 3c01 	strble.w	r3, [r6, #-1]
 800324a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800324e:	1b92      	subs	r2, r2, r6
 8003250:	6122      	str	r2, [r4, #16]
 8003252:	464b      	mov	r3, r9
 8003254:	4621      	mov	r1, r4
 8003256:	4640      	mov	r0, r8
 8003258:	f8cd a000 	str.w	sl, [sp]
 800325c:	aa03      	add	r2, sp, #12
 800325e:	f7ff fedf 	bl	8003020 <_printf_common>
 8003262:	3001      	adds	r0, #1
 8003264:	d14c      	bne.n	8003300 <_printf_i+0x200>
 8003266:	f04f 30ff 	mov.w	r0, #4294967295
 800326a:	b004      	add	sp, #16
 800326c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003270:	4834      	ldr	r0, [pc, #208]	; (8003344 <_printf_i+0x244>)
 8003272:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003276:	680e      	ldr	r6, [r1, #0]
 8003278:	6823      	ldr	r3, [r4, #0]
 800327a:	f856 5b04 	ldr.w	r5, [r6], #4
 800327e:	061f      	lsls	r7, r3, #24
 8003280:	600e      	str	r6, [r1, #0]
 8003282:	d514      	bpl.n	80032ae <_printf_i+0x1ae>
 8003284:	07d9      	lsls	r1, r3, #31
 8003286:	bf44      	itt	mi
 8003288:	f043 0320 	orrmi.w	r3, r3, #32
 800328c:	6023      	strmi	r3, [r4, #0]
 800328e:	b91d      	cbnz	r5, 8003298 <_printf_i+0x198>
 8003290:	6823      	ldr	r3, [r4, #0]
 8003292:	f023 0320 	bic.w	r3, r3, #32
 8003296:	6023      	str	r3, [r4, #0]
 8003298:	2310      	movs	r3, #16
 800329a:	e7af      	b.n	80031fc <_printf_i+0xfc>
 800329c:	6823      	ldr	r3, [r4, #0]
 800329e:	f043 0320 	orr.w	r3, r3, #32
 80032a2:	6023      	str	r3, [r4, #0]
 80032a4:	2378      	movs	r3, #120	; 0x78
 80032a6:	4828      	ldr	r0, [pc, #160]	; (8003348 <_printf_i+0x248>)
 80032a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80032ac:	e7e3      	b.n	8003276 <_printf_i+0x176>
 80032ae:	065e      	lsls	r6, r3, #25
 80032b0:	bf48      	it	mi
 80032b2:	b2ad      	uxthmi	r5, r5
 80032b4:	e7e6      	b.n	8003284 <_printf_i+0x184>
 80032b6:	4616      	mov	r6, r2
 80032b8:	e7bb      	b.n	8003232 <_printf_i+0x132>
 80032ba:	680b      	ldr	r3, [r1, #0]
 80032bc:	6826      	ldr	r6, [r4, #0]
 80032be:	1d1d      	adds	r5, r3, #4
 80032c0:	6960      	ldr	r0, [r4, #20]
 80032c2:	600d      	str	r5, [r1, #0]
 80032c4:	0635      	lsls	r5, r6, #24
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	d501      	bpl.n	80032ce <_printf_i+0x1ce>
 80032ca:	6018      	str	r0, [r3, #0]
 80032cc:	e002      	b.n	80032d4 <_printf_i+0x1d4>
 80032ce:	0671      	lsls	r1, r6, #25
 80032d0:	d5fb      	bpl.n	80032ca <_printf_i+0x1ca>
 80032d2:	8018      	strh	r0, [r3, #0]
 80032d4:	2300      	movs	r3, #0
 80032d6:	4616      	mov	r6, r2
 80032d8:	6123      	str	r3, [r4, #16]
 80032da:	e7ba      	b.n	8003252 <_printf_i+0x152>
 80032dc:	680b      	ldr	r3, [r1, #0]
 80032de:	1d1a      	adds	r2, r3, #4
 80032e0:	600a      	str	r2, [r1, #0]
 80032e2:	681e      	ldr	r6, [r3, #0]
 80032e4:	2100      	movs	r1, #0
 80032e6:	4630      	mov	r0, r6
 80032e8:	6862      	ldr	r2, [r4, #4]
 80032ea:	f000 f82f 	bl	800334c <memchr>
 80032ee:	b108      	cbz	r0, 80032f4 <_printf_i+0x1f4>
 80032f0:	1b80      	subs	r0, r0, r6
 80032f2:	6060      	str	r0, [r4, #4]
 80032f4:	6863      	ldr	r3, [r4, #4]
 80032f6:	6123      	str	r3, [r4, #16]
 80032f8:	2300      	movs	r3, #0
 80032fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032fe:	e7a8      	b.n	8003252 <_printf_i+0x152>
 8003300:	4632      	mov	r2, r6
 8003302:	4649      	mov	r1, r9
 8003304:	4640      	mov	r0, r8
 8003306:	6923      	ldr	r3, [r4, #16]
 8003308:	47d0      	blx	sl
 800330a:	3001      	adds	r0, #1
 800330c:	d0ab      	beq.n	8003266 <_printf_i+0x166>
 800330e:	6823      	ldr	r3, [r4, #0]
 8003310:	079b      	lsls	r3, r3, #30
 8003312:	d413      	bmi.n	800333c <_printf_i+0x23c>
 8003314:	68e0      	ldr	r0, [r4, #12]
 8003316:	9b03      	ldr	r3, [sp, #12]
 8003318:	4298      	cmp	r0, r3
 800331a:	bfb8      	it	lt
 800331c:	4618      	movlt	r0, r3
 800331e:	e7a4      	b.n	800326a <_printf_i+0x16a>
 8003320:	2301      	movs	r3, #1
 8003322:	4632      	mov	r2, r6
 8003324:	4649      	mov	r1, r9
 8003326:	4640      	mov	r0, r8
 8003328:	47d0      	blx	sl
 800332a:	3001      	adds	r0, #1
 800332c:	d09b      	beq.n	8003266 <_printf_i+0x166>
 800332e:	3501      	adds	r5, #1
 8003330:	68e3      	ldr	r3, [r4, #12]
 8003332:	9903      	ldr	r1, [sp, #12]
 8003334:	1a5b      	subs	r3, r3, r1
 8003336:	42ab      	cmp	r3, r5
 8003338:	dcf2      	bgt.n	8003320 <_printf_i+0x220>
 800333a:	e7eb      	b.n	8003314 <_printf_i+0x214>
 800333c:	2500      	movs	r5, #0
 800333e:	f104 0619 	add.w	r6, r4, #25
 8003342:	e7f5      	b.n	8003330 <_printf_i+0x230>
 8003344:	080035f9 	.word	0x080035f9
 8003348:	0800360a 	.word	0x0800360a

0800334c <memchr>:
 800334c:	4603      	mov	r3, r0
 800334e:	b510      	push	{r4, lr}
 8003350:	b2c9      	uxtb	r1, r1
 8003352:	4402      	add	r2, r0
 8003354:	4293      	cmp	r3, r2
 8003356:	4618      	mov	r0, r3
 8003358:	d101      	bne.n	800335e <memchr+0x12>
 800335a:	2000      	movs	r0, #0
 800335c:	e003      	b.n	8003366 <memchr+0x1a>
 800335e:	7804      	ldrb	r4, [r0, #0]
 8003360:	3301      	adds	r3, #1
 8003362:	428c      	cmp	r4, r1
 8003364:	d1f6      	bne.n	8003354 <memchr+0x8>
 8003366:	bd10      	pop	{r4, pc}

08003368 <memcpy>:
 8003368:	440a      	add	r2, r1
 800336a:	4291      	cmp	r1, r2
 800336c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003370:	d100      	bne.n	8003374 <memcpy+0xc>
 8003372:	4770      	bx	lr
 8003374:	b510      	push	{r4, lr}
 8003376:	f811 4b01 	ldrb.w	r4, [r1], #1
 800337a:	4291      	cmp	r1, r2
 800337c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003380:	d1f9      	bne.n	8003376 <memcpy+0xe>
 8003382:	bd10      	pop	{r4, pc}

08003384 <memmove>:
 8003384:	4288      	cmp	r0, r1
 8003386:	b510      	push	{r4, lr}
 8003388:	eb01 0402 	add.w	r4, r1, r2
 800338c:	d902      	bls.n	8003394 <memmove+0x10>
 800338e:	4284      	cmp	r4, r0
 8003390:	4623      	mov	r3, r4
 8003392:	d807      	bhi.n	80033a4 <memmove+0x20>
 8003394:	1e43      	subs	r3, r0, #1
 8003396:	42a1      	cmp	r1, r4
 8003398:	d008      	beq.n	80033ac <memmove+0x28>
 800339a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800339e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80033a2:	e7f8      	b.n	8003396 <memmove+0x12>
 80033a4:	4601      	mov	r1, r0
 80033a6:	4402      	add	r2, r0
 80033a8:	428a      	cmp	r2, r1
 80033aa:	d100      	bne.n	80033ae <memmove+0x2a>
 80033ac:	bd10      	pop	{r4, pc}
 80033ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80033b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80033b6:	e7f7      	b.n	80033a8 <memmove+0x24>

080033b8 <_free_r>:
 80033b8:	b538      	push	{r3, r4, r5, lr}
 80033ba:	4605      	mov	r5, r0
 80033bc:	2900      	cmp	r1, #0
 80033be:	d043      	beq.n	8003448 <_free_r+0x90>
 80033c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033c4:	1f0c      	subs	r4, r1, #4
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	bfb8      	it	lt
 80033ca:	18e4      	addlt	r4, r4, r3
 80033cc:	f000 f8d0 	bl	8003570 <__malloc_lock>
 80033d0:	4a1e      	ldr	r2, [pc, #120]	; (800344c <_free_r+0x94>)
 80033d2:	6813      	ldr	r3, [r2, #0]
 80033d4:	4610      	mov	r0, r2
 80033d6:	b933      	cbnz	r3, 80033e6 <_free_r+0x2e>
 80033d8:	6063      	str	r3, [r4, #4]
 80033da:	6014      	str	r4, [r2, #0]
 80033dc:	4628      	mov	r0, r5
 80033de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80033e2:	f000 b8cb 	b.w	800357c <__malloc_unlock>
 80033e6:	42a3      	cmp	r3, r4
 80033e8:	d90a      	bls.n	8003400 <_free_r+0x48>
 80033ea:	6821      	ldr	r1, [r4, #0]
 80033ec:	1862      	adds	r2, r4, r1
 80033ee:	4293      	cmp	r3, r2
 80033f0:	bf01      	itttt	eq
 80033f2:	681a      	ldreq	r2, [r3, #0]
 80033f4:	685b      	ldreq	r3, [r3, #4]
 80033f6:	1852      	addeq	r2, r2, r1
 80033f8:	6022      	streq	r2, [r4, #0]
 80033fa:	6063      	str	r3, [r4, #4]
 80033fc:	6004      	str	r4, [r0, #0]
 80033fe:	e7ed      	b.n	80033dc <_free_r+0x24>
 8003400:	461a      	mov	r2, r3
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	b10b      	cbz	r3, 800340a <_free_r+0x52>
 8003406:	42a3      	cmp	r3, r4
 8003408:	d9fa      	bls.n	8003400 <_free_r+0x48>
 800340a:	6811      	ldr	r1, [r2, #0]
 800340c:	1850      	adds	r0, r2, r1
 800340e:	42a0      	cmp	r0, r4
 8003410:	d10b      	bne.n	800342a <_free_r+0x72>
 8003412:	6820      	ldr	r0, [r4, #0]
 8003414:	4401      	add	r1, r0
 8003416:	1850      	adds	r0, r2, r1
 8003418:	4283      	cmp	r3, r0
 800341a:	6011      	str	r1, [r2, #0]
 800341c:	d1de      	bne.n	80033dc <_free_r+0x24>
 800341e:	6818      	ldr	r0, [r3, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	4401      	add	r1, r0
 8003424:	6011      	str	r1, [r2, #0]
 8003426:	6053      	str	r3, [r2, #4]
 8003428:	e7d8      	b.n	80033dc <_free_r+0x24>
 800342a:	d902      	bls.n	8003432 <_free_r+0x7a>
 800342c:	230c      	movs	r3, #12
 800342e:	602b      	str	r3, [r5, #0]
 8003430:	e7d4      	b.n	80033dc <_free_r+0x24>
 8003432:	6820      	ldr	r0, [r4, #0]
 8003434:	1821      	adds	r1, r4, r0
 8003436:	428b      	cmp	r3, r1
 8003438:	bf01      	itttt	eq
 800343a:	6819      	ldreq	r1, [r3, #0]
 800343c:	685b      	ldreq	r3, [r3, #4]
 800343e:	1809      	addeq	r1, r1, r0
 8003440:	6021      	streq	r1, [r4, #0]
 8003442:	6063      	str	r3, [r4, #4]
 8003444:	6054      	str	r4, [r2, #4]
 8003446:	e7c9      	b.n	80033dc <_free_r+0x24>
 8003448:	bd38      	pop	{r3, r4, r5, pc}
 800344a:	bf00      	nop
 800344c:	200000b8 	.word	0x200000b8

08003450 <_malloc_r>:
 8003450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003452:	1ccd      	adds	r5, r1, #3
 8003454:	f025 0503 	bic.w	r5, r5, #3
 8003458:	3508      	adds	r5, #8
 800345a:	2d0c      	cmp	r5, #12
 800345c:	bf38      	it	cc
 800345e:	250c      	movcc	r5, #12
 8003460:	2d00      	cmp	r5, #0
 8003462:	4606      	mov	r6, r0
 8003464:	db01      	blt.n	800346a <_malloc_r+0x1a>
 8003466:	42a9      	cmp	r1, r5
 8003468:	d903      	bls.n	8003472 <_malloc_r+0x22>
 800346a:	230c      	movs	r3, #12
 800346c:	6033      	str	r3, [r6, #0]
 800346e:	2000      	movs	r0, #0
 8003470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003472:	f000 f87d 	bl	8003570 <__malloc_lock>
 8003476:	4921      	ldr	r1, [pc, #132]	; (80034fc <_malloc_r+0xac>)
 8003478:	680a      	ldr	r2, [r1, #0]
 800347a:	4614      	mov	r4, r2
 800347c:	b99c      	cbnz	r4, 80034a6 <_malloc_r+0x56>
 800347e:	4f20      	ldr	r7, [pc, #128]	; (8003500 <_malloc_r+0xb0>)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	b923      	cbnz	r3, 800348e <_malloc_r+0x3e>
 8003484:	4621      	mov	r1, r4
 8003486:	4630      	mov	r0, r6
 8003488:	f000 f862 	bl	8003550 <_sbrk_r>
 800348c:	6038      	str	r0, [r7, #0]
 800348e:	4629      	mov	r1, r5
 8003490:	4630      	mov	r0, r6
 8003492:	f000 f85d 	bl	8003550 <_sbrk_r>
 8003496:	1c43      	adds	r3, r0, #1
 8003498:	d123      	bne.n	80034e2 <_malloc_r+0x92>
 800349a:	230c      	movs	r3, #12
 800349c:	4630      	mov	r0, r6
 800349e:	6033      	str	r3, [r6, #0]
 80034a0:	f000 f86c 	bl	800357c <__malloc_unlock>
 80034a4:	e7e3      	b.n	800346e <_malloc_r+0x1e>
 80034a6:	6823      	ldr	r3, [r4, #0]
 80034a8:	1b5b      	subs	r3, r3, r5
 80034aa:	d417      	bmi.n	80034dc <_malloc_r+0x8c>
 80034ac:	2b0b      	cmp	r3, #11
 80034ae:	d903      	bls.n	80034b8 <_malloc_r+0x68>
 80034b0:	6023      	str	r3, [r4, #0]
 80034b2:	441c      	add	r4, r3
 80034b4:	6025      	str	r5, [r4, #0]
 80034b6:	e004      	b.n	80034c2 <_malloc_r+0x72>
 80034b8:	6863      	ldr	r3, [r4, #4]
 80034ba:	42a2      	cmp	r2, r4
 80034bc:	bf0c      	ite	eq
 80034be:	600b      	streq	r3, [r1, #0]
 80034c0:	6053      	strne	r3, [r2, #4]
 80034c2:	4630      	mov	r0, r6
 80034c4:	f000 f85a 	bl	800357c <__malloc_unlock>
 80034c8:	f104 000b 	add.w	r0, r4, #11
 80034cc:	1d23      	adds	r3, r4, #4
 80034ce:	f020 0007 	bic.w	r0, r0, #7
 80034d2:	1ac2      	subs	r2, r0, r3
 80034d4:	d0cc      	beq.n	8003470 <_malloc_r+0x20>
 80034d6:	1a1b      	subs	r3, r3, r0
 80034d8:	50a3      	str	r3, [r4, r2]
 80034da:	e7c9      	b.n	8003470 <_malloc_r+0x20>
 80034dc:	4622      	mov	r2, r4
 80034de:	6864      	ldr	r4, [r4, #4]
 80034e0:	e7cc      	b.n	800347c <_malloc_r+0x2c>
 80034e2:	1cc4      	adds	r4, r0, #3
 80034e4:	f024 0403 	bic.w	r4, r4, #3
 80034e8:	42a0      	cmp	r0, r4
 80034ea:	d0e3      	beq.n	80034b4 <_malloc_r+0x64>
 80034ec:	1a21      	subs	r1, r4, r0
 80034ee:	4630      	mov	r0, r6
 80034f0:	f000 f82e 	bl	8003550 <_sbrk_r>
 80034f4:	3001      	adds	r0, #1
 80034f6:	d1dd      	bne.n	80034b4 <_malloc_r+0x64>
 80034f8:	e7cf      	b.n	800349a <_malloc_r+0x4a>
 80034fa:	bf00      	nop
 80034fc:	200000b8 	.word	0x200000b8
 8003500:	200000bc 	.word	0x200000bc

08003504 <_realloc_r>:
 8003504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003506:	4607      	mov	r7, r0
 8003508:	4614      	mov	r4, r2
 800350a:	460e      	mov	r6, r1
 800350c:	b921      	cbnz	r1, 8003518 <_realloc_r+0x14>
 800350e:	4611      	mov	r1, r2
 8003510:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003514:	f7ff bf9c 	b.w	8003450 <_malloc_r>
 8003518:	b922      	cbnz	r2, 8003524 <_realloc_r+0x20>
 800351a:	f7ff ff4d 	bl	80033b8 <_free_r>
 800351e:	4625      	mov	r5, r4
 8003520:	4628      	mov	r0, r5
 8003522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003524:	f000 f830 	bl	8003588 <_malloc_usable_size_r>
 8003528:	42a0      	cmp	r0, r4
 800352a:	d20f      	bcs.n	800354c <_realloc_r+0x48>
 800352c:	4621      	mov	r1, r4
 800352e:	4638      	mov	r0, r7
 8003530:	f7ff ff8e 	bl	8003450 <_malloc_r>
 8003534:	4605      	mov	r5, r0
 8003536:	2800      	cmp	r0, #0
 8003538:	d0f2      	beq.n	8003520 <_realloc_r+0x1c>
 800353a:	4631      	mov	r1, r6
 800353c:	4622      	mov	r2, r4
 800353e:	f7ff ff13 	bl	8003368 <memcpy>
 8003542:	4631      	mov	r1, r6
 8003544:	4638      	mov	r0, r7
 8003546:	f7ff ff37 	bl	80033b8 <_free_r>
 800354a:	e7e9      	b.n	8003520 <_realloc_r+0x1c>
 800354c:	4635      	mov	r5, r6
 800354e:	e7e7      	b.n	8003520 <_realloc_r+0x1c>

08003550 <_sbrk_r>:
 8003550:	b538      	push	{r3, r4, r5, lr}
 8003552:	2300      	movs	r3, #0
 8003554:	4d05      	ldr	r5, [pc, #20]	; (800356c <_sbrk_r+0x1c>)
 8003556:	4604      	mov	r4, r0
 8003558:	4608      	mov	r0, r1
 800355a:	602b      	str	r3, [r5, #0]
 800355c:	f7fd f9f2 	bl	8000944 <_sbrk>
 8003560:	1c43      	adds	r3, r0, #1
 8003562:	d102      	bne.n	800356a <_sbrk_r+0x1a>
 8003564:	682b      	ldr	r3, [r5, #0]
 8003566:	b103      	cbz	r3, 800356a <_sbrk_r+0x1a>
 8003568:	6023      	str	r3, [r4, #0]
 800356a:	bd38      	pop	{r3, r4, r5, pc}
 800356c:	200001a4 	.word	0x200001a4

08003570 <__malloc_lock>:
 8003570:	4801      	ldr	r0, [pc, #4]	; (8003578 <__malloc_lock+0x8>)
 8003572:	f000 b811 	b.w	8003598 <__retarget_lock_acquire_recursive>
 8003576:	bf00      	nop
 8003578:	200001ac 	.word	0x200001ac

0800357c <__malloc_unlock>:
 800357c:	4801      	ldr	r0, [pc, #4]	; (8003584 <__malloc_unlock+0x8>)
 800357e:	f000 b80c 	b.w	800359a <__retarget_lock_release_recursive>
 8003582:	bf00      	nop
 8003584:	200001ac 	.word	0x200001ac

08003588 <_malloc_usable_size_r>:
 8003588:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800358c:	1f18      	subs	r0, r3, #4
 800358e:	2b00      	cmp	r3, #0
 8003590:	bfbc      	itt	lt
 8003592:	580b      	ldrlt	r3, [r1, r0]
 8003594:	18c0      	addlt	r0, r0, r3
 8003596:	4770      	bx	lr

08003598 <__retarget_lock_acquire_recursive>:
 8003598:	4770      	bx	lr

0800359a <__retarget_lock_release_recursive>:
 800359a:	4770      	bx	lr

0800359c <_init>:
 800359c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800359e:	bf00      	nop
 80035a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035a2:	bc08      	pop	{r3}
 80035a4:	469e      	mov	lr, r3
 80035a6:	4770      	bx	lr

080035a8 <_fini>:
 80035a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035aa:	bf00      	nop
 80035ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ae:	bc08      	pop	{r3}
 80035b0:	469e      	mov	lr, r3
 80035b2:	4770      	bx	lr
